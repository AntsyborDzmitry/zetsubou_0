{"version":3,"sources":["services/ewf-crud-service.js"],"names":[],"mappings":"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","file":"services/ewf-crud-service.js","sourcesContent":["import ewf from 'ewf';\r\n\r\newf.service('ewfCrudService', ewfCrudService);\r\n\r\newfCrudService.$inject = ['$http', '$q', 'logService'];\r\n\r\nexport default function ewfCrudService($http, $q, logService) {\r\n    Object.assign(this, {\r\n        updateElement,\r\n        deleteElements,\r\n        getElementDetails,\r\n        addElement,\r\n        getElementList,\r\n        changeElement,\r\n        deleteElement\r\n    });\r\n\r\n    function deleteElements(elementKeys, url, paramName) {\r\n        const elementKeysArr = Array.isArray(elementKeys)\r\n            ? elementKeys\r\n            : [elementKeys];\r\n\r\n        const deleteRequest = {};\r\n        deleteRequest[paramName] = elementKeysArr;\r\n\r\n        return $http.post(url, deleteRequest)\r\n            .then((response) => {\r\n                logService.log(`Deleted objects from ${url} `, response);\r\n                return response.data;\r\n            })\r\n            .catch((response) => {\r\n                logService.error(`delete objects failed from ${url} `, response);\r\n                return $q.reject(response.data);\r\n            });\r\n    }\r\n\r\n    function getElementDetails(url, key) {\r\n        const constructedUrl = key ? `${url}/${key}` : `${url}`;\r\n        return $http.get(constructedUrl, {\r\n            params: {preventcache: new Date().getTime()}\r\n        })\r\n            .then((response) => {\r\n                logService.log(`Got object from ${url} `, response);\r\n                return response.data;\r\n            })\r\n            .catch((response) => {\r\n                logService.error(`get objects failed from ${url} `, response);\r\n                return $q.reject(response.data);\r\n            });\r\n    }\r\n\r\n    function getElementList(url) {\r\n        return $http.get(url, {\r\n            params: {preventcache: new Date().getTime()}\r\n        })\r\n            .then((response) => {\r\n                logService.log(`Got objects from ${url} `, response);\r\n                return response.data;\r\n            })\r\n            .catch((response) => {\r\n                logService.error(`get list failed from ${url} `, response);\r\n                return $q.reject(response.data);\r\n            });\r\n    }\r\n\r\n    function addElement(url, elementInfo) {\r\n        return $http.post(url, elementInfo)\r\n            .then((response) => {\r\n                logService.log(`Added objects to ${url} `, response);\r\n                return response.data;\r\n            })\r\n            .catch((response) => {\r\n                logService.error(`add objects failed from ${url} `, response);\r\n                return $q.reject(response);\r\n            });\r\n    }\r\n\r\n    function updateElement(url, elementInfo) {\r\n        return makeRequest('post', url, elementInfo);\r\n    }\r\n\r\n    function changeElement(url, elementInfo) {\r\n        return makeRequest('put', url, elementInfo);\r\n    }\r\n\r\n    function deleteElement(url) {\r\n        return makeRequest('delete', url);\r\n    }\r\n\r\n    function makeRequest(method, url, elementInfo) {\r\n        return $http[method](url, elementInfo)\r\n            .then((response) => {\r\n                logService.log(`${method.toUpperCase()} request to ${url}`, response);\r\n                return response.data;\r\n            })\r\n            .catch((response) => {\r\n                logService.error(`${method.toUpperCase()} request failed to ${url}`, response);\r\n                return $q.reject(response.data);\r\n            });\r\n    }\r\n\r\n\r\n}\r\n"],"sourceRoot":"/source/"}