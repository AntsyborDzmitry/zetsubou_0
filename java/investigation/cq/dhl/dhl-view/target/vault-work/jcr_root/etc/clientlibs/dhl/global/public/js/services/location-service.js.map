{"version":3,"sources":["services/location-service.js"],"names":[],"mappings":";;;qBAMwB,eAAe;;;;;;AAJvC,qBAAI,OAAO,CAAC,iBAAiB,EAAE,eAAe,CAAC,CAAC;;AAEhD,mBAAe,CAAC,OAAO,GAAG,CAAC,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,YAAY,CAAC,CAAC;;AAErD,aAAS,eAAe,CAAC,KAAK,EAAE,EAAE,EAAE,QAAQ,EAAE,UAAU,EAAE;;AAErE,YAAM,SAAS,GAAG;AACd,kCAAsB,EAAtB,sBAAsB;AACtB,uBAAW,EAAX,WAAW;AACX,4BAAgB,EAAhB,gBAAgB;SACnB,CAAC;;AAEF,YAAI,kBAAkB,GAAG,EAAE,CAAC;;AAE5B,iBAAS,sBAAsB,GAAG;AAC9B,gBAAI,kBAAkB,CAAC,MAAM,EAAE;AAC3B,oBAAM,QAAQ,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC;AAC5B,wBAAQ,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;AACrC,uBAAO,QAAQ,CAAC,OAAO,CAAC;aAC3B;AACD,mBAAO,KAAK,CAAC,GAAG,CAAC,oBAAoB,CAAC,CACjC,IAAI,CAAC,UAAC,QAAQ,EAAK;AAChB,kCAAkB,GAAG,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,UAAC,WAAW,EAAK;AACpD,wBAAM,WAAW,GAAG,WAAW,CAAC,IAAI,CAAC;AACrC,wBAAM,sBAAsB,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;AACnE,wBAAM,eAAe,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;AAC5D,+BAAW,CAAC,eAAe,QAAM,sBAAsB,GAAG,eAAe,AAAE,CAAC;AAC5E,+BAAW,CAAC,IAAI,aAAW,WAAW,CAAC,KAAK,AAAE,CAAC;AAC/C,2BAAO,WAAW,CAAC;iBACtB,CAAC,CAAC;AACH,uBAAO,kBAAkB,CAAC;aAC7B,CAAC,SACI,CAAC,UAAC,QAAQ,EAAK;AACjB,0BAAU,CAAC,KAAK,CAAC,4CAA4C,CAAC,CAAC;AAC/D,uBAAO,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;aACnC,CAAC,CAAC;SACV;;AAED,iBAAS,WAAW,CAAC,OAAO,EAAE;AAC1B,gBAAI,OAAO,CAAC,KAAK,EAAE;;AAEf,wBAAQ,CAAC,cAAc,GAAG,OAAO,CAAC,KAAK,CAAC;aAC3C;SACJ;;AAED,iBAAS,gBAAgB,GAAG;AACxB,mBAAO,QAAQ,CAAC,cAAc,CAAC;SAClC;;AAED,eAAO,SAAS,CAAC;KACpB","file":"services/location-service.js","sourcesContent":["import ewf from 'ewf';\r\n\r\newf.service('locationService', LocationService);\r\n\r\nLocationService.$inject = ['$http', '$q', '$cookies', 'logService'];\r\n\r\nexport default function LocationService($http, $q, $cookies, logService) {\r\n\r\n    const publicAPI = {\r\n        loadAvailableLocations,\r\n        saveCountry,\r\n        getStoredCountry\r\n    };\r\n\r\n    let availableLocations = [];\r\n\r\n    function loadAvailableLocations() {\r\n        if (availableLocations.length) {\r\n            const deferred = $q.defer();\r\n            deferred.resolve(availableLocations);\r\n            return deferred.promise;\r\n        }\r\n        return $http.get('/api/location/list')\r\n            .then((response) => {\r\n                availableLocations = response.data.map((countryInfo) => {\r\n                    const countryName = countryInfo.name;\r\n                    const countryNameFirstLetter = countryName.charAt(0).toUpperCase();\r\n                    const countryNameLast = countryName.substr(1).toLowerCase();\r\n                    countryInfo.capitalizedName = `${countryNameFirstLetter}${countryNameLast}`;\r\n                    countryInfo.flag = `flag_${countryInfo.code2}`;\r\n                    return countryInfo;\r\n                });\r\n                return availableLocations;\r\n            })\r\n            .catch((response) => {\r\n                logService.error('location-selector failed to get locations!');\r\n                return $q.reject(response.data);\r\n            });\r\n    }\r\n\r\n    function saveCountry(country) {\r\n        if (country.code3) {\r\n            // TODO: add expiration date\r\n            $cookies.defaultCountry = country.code3;\r\n        }\r\n    }\r\n\r\n    function getStoredCountry() {\r\n        return $cookies.defaultCountry;\r\n    }\r\n\r\n    return publicAPI;\r\n}\r\n"],"sourceRoot":"/source/"}