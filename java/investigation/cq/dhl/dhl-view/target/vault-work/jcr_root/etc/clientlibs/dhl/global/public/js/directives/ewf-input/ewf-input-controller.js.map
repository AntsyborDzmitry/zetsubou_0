{"version":3,"sources":["directives/ewf-input/ewf-input-controller.js"],"names":[],"mappings":"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","file":"directives/ewf-input/ewf-input-controller.js","sourcesContent":["import 'services/rule-service';\r\nimport './../../validation/validators-factory';\r\nimport 'services/log-service';\r\nimport './../../services/nls-service';\r\n\r\n/* @todo: START - Code to eliminate after refactoring  */\r\n\r\nconst PROPS = {\r\n    defaultValue: function(value, attrs, ngModelController) {\r\n        ngModelController.$setViewValue(value);\r\n        ngModelController.$render();\r\n    },\r\n\r\n    //TODO: implement\r\n    options: function(/*params, attrs*/) {\r\n\r\n    },\r\n\r\n    // TODO: Implement\r\n    hint: function(/*value, fieldName*/) {\r\n    }\r\n};\r\n\r\n/* @todo: END - Code to eliminate after refactoring  */\r\n\r\nInputController.$inject = ['$scope', '$q', 'logService', 'ruleService', 'nlsService', 'validatorsFactory'];\r\n\r\nexport default function InputController($scope, $q, logService, ruleService, nlsService, validatorsFactory) {\r\n    const vm = this;\r\n\r\n    let rules = {};\r\n    const elementDefer = $q.defer();\r\n\r\n    Object.assign(vm, {\r\n        init,\r\n        applyRules,\r\n        setupValidation,\r\n        validationCallback,\r\n        addValidator,\r\n        validate,\r\n        addErrorMessage,\r\n        cleanErrorMessages,\r\n        removeSpecificErrorMessage,\r\n        initializeRules,\r\n        addValidatorsFromRules,\r\n        triggerValidation,\r\n\r\n        validationErrorMessage: {},\r\n        validationIsVisible: false,\r\n        fieldName: null,\r\n        validators: [],\r\n        ngModelCtrl: null,\r\n        ewfFormCtrl: null\r\n    });\r\n\r\n    function init(fieldId, element, attrs, ngModelController) {\r\n        vm.fieldId = fieldId;\r\n        vm.fieldName = fieldId.split('.')[1];\r\n        vm.ngModelController = ngModelController;\r\n\r\n        elementDefer.resolve(element);\r\n        vm.initializeRules();\r\n        vm.applyRules(attrs);\r\n        vm.addValidatorsFromRules();\r\n    }\r\n\r\n    function initializeRules() {\r\n        // ruleService is async, but we get rule synchronously\r\n        const formFields = ruleService.getFieldRules(vm.fieldId);\r\n        if (formFields) {\r\n            rules = formFields;\r\n        }\r\n    }\r\n\r\n    function applyRules(attrs) {\r\n        if (!rules.props) {\r\n            return;\r\n        }\r\n\r\n        const fieldProps = rules.props;\r\n        Object.keys(fieldProps).forEach((propName) => {\r\n            const propValue = fieldProps[propName];\r\n            const handler = PROPS[propName];\r\n\r\n            try {\r\n                handler(propValue, attrs, vm.ngModelController);\r\n            } catch (error) {\r\n                logService.error('error while applying prop handler \"' + propName +\r\n                                    '\" to field \"' + rules.props.fieldId + '\" : ' + error);\r\n            }\r\n        });\r\n    }\r\n\r\n    function addValidatorsFromRules() {\r\n        vm.cleanErrorMessages();\r\n        if (!rules.validators) {\r\n            return;\r\n        }\r\n\r\n        for (let rule of rules.validators) {\r\n            const functionName = rule.type;\r\n            const validator = validatorsFactory.createValidator(functionName, rule.params);\r\n            if (validator) {\r\n                addValidator(validator);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setupValidation() {\r\n        vm.ngModelCtrl.$parsers.push(vm.validationCallback);\r\n        vm.ngModelCtrl.$formatters.push(vm.validationCallback);\r\n    }\r\n\r\n    function validationCallback(value) {\r\n        vm.ngModelCtrl.$setValidity('ewfValid', vm.validate(value));\r\n        return value;\r\n    }\r\n\r\n    function addValidator(validator) {\r\n        vm.validators.push(validator);\r\n\r\n        elementDefer.promise.then((element) => {\r\n            element.addClass(validator.getCSSClass());\r\n        });\r\n    }\r\n\r\n    function validate(value) {\r\n        let valid = true;\r\n        vm.cleanErrorMessages();\r\n        for (let validator of vm.validators) {\r\n            const validatorResponse = validator.validate(value);\r\n            if (validatorResponse === false) {\r\n                vm.addErrorMessage(validator.getMessage());\r\n                valid = false;\r\n                break;\r\n            }\r\n        }\r\n        return valid;\r\n    }\r\n\r\n    function addErrorMessage(message) {\r\n        vm.ewfFormCtrl.addFieldError(vm.fieldName, message);\r\n    }\r\n\r\n    function cleanErrorMessages() {\r\n        vm.ewfFormCtrl.cleanFieldErrors(vm.fieldName);\r\n    }\r\n\r\n    function removeSpecificErrorMessage(message) {\r\n        vm.ewfFormCtrl.removeFieldError(vm.fieldName, message);\r\n    }\r\n\r\n    function triggerValidation() {\r\n        const ngModel = vm.ngModelCtrl;\r\n        ngModel.$setViewValue(ngModel.$viewValue);\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}