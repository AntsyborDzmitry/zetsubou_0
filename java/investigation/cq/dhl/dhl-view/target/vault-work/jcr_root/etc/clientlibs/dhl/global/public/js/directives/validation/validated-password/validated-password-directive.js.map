{"version":3,"sources":["directives/validation/validated-password/validated-password-directive.js"],"names":[],"mappings":";;;;;;;;;;;;AAQA,qBAAI,SAAS,CAAC,mBAAmB,EAAE,iBAAiB,CAAC,CAAC;;AAEtD,qBAAiB,CAAC,OAAO,GAAG,CAAC,kBAAkB,EAAE,mBAAmB,CAAC,CAAC;;AAEtE,aAAS,iBAAiB,CAAC,gBAAgB,EAAE,iBAAiB,EAAE;AAC5D,eAAO;AACH,oBAAQ,EAAE,GAAG;AACb,mBAAO,EAAE,CAAC,SAAS,EAAE,OAAO,CAAC;AAC7B,gBAAI,EAAE;AACF,oBAAI,EAAE,cAAC,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAK;gDACX,KAAK;;wBAAnB,IAAI;wBAAE,IAAI;;AACjB,wBAAM,eAAe,GAAG,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;;AAElD,wBAAI,CAAC,OAAO,GAAG,gBAAgB,CAAC,gBAAgB,CAAC;AACjD,wBAAI,CAAC,SAAS,GAAG,gBAAgB,CAAC,mBAAmB,CAAC;AACtD,wBAAI,CAAC,cAAc,GAAG;AAClB,gCAAQ,EAAE,gBAAgB,CAAC,uBAAuB;AAClD,iCAAS,EAAE,gBAAgB,CAAC,6BAA6B;qBAC5D,CAAC;;AAEF,wBAAI,KAAK,CAAC,OAAO,EAAE;AACf,uCAAe,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;;AAEhC,4BAAI,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;AACnC,4BAAI,CAAC,cAAc,CAAC,OAAO,GAAG,wCAAwC,CAAC;qBAC1E;;AAED,qCAAiB,CAAC,oBAAoB,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC;;;AAG9D,yBAAK,CAAC,GAAG,CAAC,cAAc,EAAE;+BAAM,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;qBAAA,CAAC,CAAC;;AAElE,uBAAG,CAAC,EAAE,CAAC,MAAM,EAAE;+BAAM,GAAG,CAAC,QAAQ,CAAC,kBAAkB,CAAC;qBAAA,CAAC,CAAC;iBAC1D;aACJ;SACJ,CAAC;KACL","file":"directives/validation/validated-password/validated-password-directive.js","sourcesContent":["import ewf from 'ewf';\r\n\r\nimport '../services/validation-config';\r\nimport '../services/validation-service';\r\n\r\n/**\r\n * Validates password field\r\n */\r\newf.directive('validatedPassword', ValidatedPassword);\r\n\r\nValidatedPassword.$inject = ['validationConfig', 'validationService'];\r\n\r\nfunction ValidatedPassword(validationConfig, validationService) {\r\n    return {\r\n        restrict: 'A',\r\n        require: ['ngModel', '^form'],\r\n        link: {\r\n            post: (scope, elm, attrs, ctrls) => {\r\n                const [ctrl, form] = ctrls;\r\n                const validationRules = ['required', 'formatted'];\r\n\r\n                ctrl.pattern = validationConfig.PASSWORD_PATTERN;\r\n                ctrl.maxLength = validationConfig.PASSWORD_MAX_LENGTH;\r\n                ctrl.errorsMessages = {\r\n                    required: validationConfig.PASSWORD_REQUIRED_ERROR,\r\n                    formatted: validationConfig.PASSWORD_INAPPROPRIATE_FORMAT\r\n                };\r\n\r\n                if (attrs.matches) {\r\n                    validationRules.push('matches');\r\n\r\n                    ctrl.matches = form[attrs.matches];\r\n                    ctrl.errorsMessages.matches = 'registration.validation_password_match';\r\n                }\r\n\r\n                validationService.applyRulesValidators(ctrl, validationRules);\r\n\r\n                // trigger validation\r\n                scope.$on('ValidateForm', () => ctrl.$setViewValue(elm[0].value));\r\n\r\n                elm.on('blur', () => elm.addClass('ng-dirty ng-blur'));\r\n            }\r\n        }\r\n    };\r\n}\r\n"],"sourceRoot":"/source/"}