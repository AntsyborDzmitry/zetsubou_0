{"version":3,"sources":["directives/ewf-search/ewf-search-controller.js"],"names":[],"mappings":"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","file":"directives/ewf-search/ewf-search-controller.js","sourcesContent":["import '../../services/search-service';\r\nimport '../../services/attrs-service';\r\nimport '../../services/nls-service';\r\nimport angular from 'angular';\r\n\r\nEwfSearchController.$inject = [\r\n    '$scope',\r\n    '$attrs',\r\n    '$q',\r\n    'ewfSearchService',\r\n    'attrsService',\r\n    'nlsService'\r\n];\r\n\r\nexport default function EwfSearchController(\r\n    $scope,\r\n    $attrs,\r\n    $q,\r\n    ewfSearchService,\r\n    attrsService,\r\n    nlsService\r\n) {\r\n    const vm = this;\r\n    const ewfSearch = $attrs.ewfSearch ? $scope.$eval($attrs.ewfSearch) : {};\r\n    //uses for define empty typeahead search\r\n    const testKeyForOnFocusSearch = 'D5B5E5F4-923E-4FD7-AC06-65EA2A7DDED5';\r\n    const excludedFromUIFieldList = ['eoriNumber', 'cnpjOrCPFTaxID'];\r\n\r\n\r\n    Object.assign(vm, {\r\n        fields: generateFields([\r\n            ['name', 'address-book.contact_name_title'],\r\n            ['company', 'address-book.company_title'],\r\n            ['address1', 'address-book.address_title'],\r\n            ['city', 'address-book.city_title'],\r\n            ['postalCode', 'address-book.zip_title'],\r\n            ['suburb', 'address-book.paidBy_title'],\r\n            ['stateProvince', 'address-book.state_or_province'],\r\n            ['country', 'address-book.country_title'],\r\n            ['emailAddress', 'address-book.email_title'],\r\n            ['phone', 'address-book.work_phone_title'],\r\n            ['nickname', 'address-book.nickName_title'],\r\n            ['matchCode', 'address-book.matchCode_title'],\r\n            ['vatTaxId', 'address-book.vat_title'],\r\n            ['deliveryNote', 'address-book.deliveryNote_title'],\r\n            ['eoriNumber', 'address-book.eoriNumber_title'],\r\n            ['cnpjOrCPFTaxID', 'address-book.cnpjOrCPFTaxID_title']\r\n        ]),\r\n        plainSearchQuery: '',\r\n\r\n        getTestKeyForOnFocusSearch,\r\n        plainSearch,\r\n        typeAheadSearch\r\n    });\r\n\r\n    setQueryParamsString();\r\n\r\n    const translationPromise = translateFields();\r\n    const translationGroupNamesPromise = translateGroupNames();\r\n\r\n    function plainSearch(query, category) {\r\n        return ewfSearchService.plainSearch(getQuery(query), getFieldName(category), ewfSearch.searchType)\r\n            .then((data) => attrsService.trigger($scope, $attrs, 'onSearch', {$data: data}));\r\n    }\r\n\r\n    function typeAheadSearch(query, category) {\r\n        const searchQuery = getQuery(query);\r\n        const typeAheadSearchPromise = ewfSearchService.typeAheadSearch(\r\n            searchQuery,\r\n            getFieldName(category),\r\n            ewfSearch.queryParamsString,\r\n            ewfSearch.searchType\r\n        );\r\n\r\n        return $q.all([typeAheadSearchPromise, translationGroupNamesPromise, translationPromise])\r\n            .then((results) => {\r\n                const [searchData, [fromAddressBookTranslation, fromFavoritesTranslation]] = results;\r\n                if (!searchData.results.length) {\r\n                    return [];\r\n                }\r\n                const responseList = searchData.results.map((item) => {\r\n                    let subSearchResultTitle = '';\r\n                    let subSearchResult = item.matchedParameter && Object.keys(item.matchedParameter)[0];\r\n\r\n                    if (subSearchResult) {\r\n                        vm.fields.forEach((translation) => {\r\n                            if (translation.name === subSearchResult) {\r\n                                subSearchResultTitle = `${translation.caption} : `;\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    subSearchResult = item.matchedParameter && item.matchedParameter[subSearchResult] || '';\r\n\r\n                    return {\r\n                        name: item.line1,\r\n                        line1: item.line1,\r\n                        line2: item.line2,\r\n                        line3: item.line3,\r\n                        line4: subSearchResultTitle,\r\n                        line5: subSearchResult,\r\n                        group: searchQuery ? fromAddressBookTranslation : fromFavoritesTranslation,\r\n                        key: item.data.key,\r\n                        data: item.data\r\n                    };\r\n                });\r\n\r\n                responseList[0].firstInGroup = true;\r\n                return responseList;\r\n            });\r\n    }\r\n\r\n    function getFieldConfig(name, caption, type = 'numerical') {\r\n        const showInUI = !excludedFromUIFieldList.includes(name);\r\n        return {\r\n            name,\r\n            caption,\r\n            type,\r\n            showInUI\r\n        };\r\n    }\r\n\r\n    function generateFields(fieldParametersList) {\r\n        return fieldParametersList.map((fieldParameters) => getFieldConfig.apply(vm, fieldParameters));\r\n    }\r\n\r\n    function translateFields() {\r\n        const translateDeferred = $q.defer();\r\n        const translationPromises = vm.fields.map((field) => nlsService.getTranslation(field.caption));\r\n\r\n        $q.all(translationPromises)\r\n            .then((translations) => {\r\n                translations.forEach((translation, index) => vm.fields[index].caption = translation);\r\n                translateDeferred.resolve(true);\r\n            })\r\n            //even if we can't get translation, show search results any way\r\n            .catch(() => translateDeferred.resolve(false));\r\n        return translateDeferred.promise;\r\n    }\r\n\r\n    function translateGroupNames() {\r\n        const translateDeferred = $q.defer();\r\n        const translationPromises = [\r\n            nlsService.getTranslation('address-book.from_address_book_group_name'),\r\n            nlsService.getTranslation('address-book.from_favorites_group_name')\r\n        ];\r\n\r\n        $q.all(translationPromises)\r\n            .then((translations) => translateDeferred.resolve(translations))\r\n            //even if we can't get translation, show search results any way\r\n            .catch(() => translateDeferred.resolve([]));\r\n        return translateDeferred.promise;\r\n    }\r\n\r\n    function getFieldName(fieldName) {\r\n        return fieldName || ewfSearch.fieldName;\r\n    }\r\n\r\n    function getQuery(query) {\r\n        return encodeURIComponent(query === testKeyForOnFocusSearch ? '' : query);\r\n    }\r\n\r\n    function getTestKeyForOnFocusSearch() {\r\n        return testKeyForOnFocusSearch;\r\n    }\r\n\r\n    function setQueryParamsString() {\r\n        ewfSearch.queryParamsString = angular.element.param(ewfSearch.queryParams || {});\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}