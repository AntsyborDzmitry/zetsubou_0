{"version":3,"sources":["directives/ewf-container/ewf-container-controller.js"],"names":[],"mappings":";;;qBAYwB,sBAAsB;;;;;;AAV9C,qBAAI,UAAU,CAAC,wBAAwB,EAAE,sBAAsB,CAAC,CAAC;;AAEjE,0BAAsB,CAAC,MAAM,GAAG,CAAC,YAAY,CAAC,CAAC;;;;;;;;;AAQhC,aAAS,sBAAsB,CAAC,UAAU,EAAE;AACvD,YAAM,EAAE,GAAG,IAAI,CAAC;AAChB,YAAM,mBAAmB,GAAG,EAAE,CAAC;AAC/B,YAAM,eAAe,GAAG,EAAE,CAAC;;AAE3B,cAAM,CAAC,MAAM,CAAC,EAAE,EAAE;AACd,sCAA0B,EAA1B,0BAA0B;AAC1B,2CAA+B,EAA/B,+BAA+B;AAC/B,4BAAgB,EAAhB,gBAAgB;SACnB,CAAC,CAAC;;AAEH,iBAAS,0BAA0B,CAAC,cAAc,EAAE,YAAY,EAAE;AAC9D,gBAAM,aAAa,GAAG,CAAC,CAAC,mBAAmB,CAAC,cAAc,CAAC,CAAC;;AAE5D,+BAAmB,CAAC,cAAc,CAAC,GAAG,YAAY,CAAC;;AAEnD,sBAAU,CAAC,GAAG,CAAC,aAAa,sCACW,cAAc,eAC5C,cAAc,wCAAqC,CAAC,CAAC;;AAE9D,gBAAI,eAAe,CAAC,cAAc,CAAC,EAAE;AACjC,+BAAe,CAAC,cAAc,CAAC,EAAE,CAAC;aACrC;SACJ;;AAED,iBAAS,+BAA+B,CAAC,cAAc,EAAE;AACrD,gBAAM,YAAY,GAAG,mBAAmB,CAAC,cAAc,CAAC,CAAC;AACzD,gBAAI,YAAY,EAAE;AACd,uBAAO,YAAY,CAAC;aACvB;;AAED,sBAAU,CAAC,KAAK,SAAO,cAAc,wBAAqB,CAAC;SAC9D;;AAED,iBAAS,gBAAgB,CAAC,cAAc,EAAE,QAAQ,EAAE;AAChD,gBAAI,mBAAmB,CAAC,cAAc,CAAC,EAAE;AACrC,0BAAU,CAAC,KAAK,CAAI,cAAc,sEAAmE,CAAC;AACtG,uBAAO;aACV;;AAED,2BAAe,CAAC,cAAc,CAAC,GAAG,QAAQ,CAAC;SAC9C;KACJ","file":"directives/ewf-container/ewf-container-controller.js","sourcesContent":["import ewf from 'ewf';\r\n\r\newf.controller('ewfContainerController', ewfContainerController);\r\n\r\newfContainerController.inject = ['logService'];\r\n\r\n/**\r\n * Instance storage controller.\r\n * Stores controller's instances, that may be required by other controller and cannot be injected with requires\r\n *\r\n * @param {logService} logService\r\n */\r\nexport default function ewfContainerController(logService) {\r\n    const vm = this;\r\n    const controllerInstances = {};\r\n    const callbackStorage = {};\r\n\r\n    Object.assign(vm, {\r\n        registerControllerInstance,\r\n        getRegisteredControllerInstance,\r\n        registerCallback\r\n    });\r\n\r\n    function registerControllerInstance(controllerName, ctrlInstance) {\r\n        const wasRegistered = !!controllerInstances[controllerName];\r\n\r\n        controllerInstances[controllerName] = ctrlInstance;\r\n\r\n        logService.log(wasRegistered\r\n            ? `Trying to register controller ${controllerName} again.`\r\n            : `${controllerName} controller successfully registered`);\r\n\r\n        if (callbackStorage[controllerName]) {\r\n            callbackStorage[controllerName]();\r\n        }\r\n    }\r\n\r\n    function getRegisteredControllerInstance(controllerName) {\r\n        const ctrlInstance = controllerInstances[controllerName];\r\n        if (ctrlInstance) {\r\n            return ctrlInstance;\r\n        }\r\n\r\n        logService.error(`No ${controllerName} controller found!`);\r\n    }\r\n\r\n    function registerCallback(controllerName, callback) {\r\n        if (controllerInstances[controllerName]) {\r\n            logService.error(`${controllerName} controller already registered, callback does not make any sense`);\r\n            return;\r\n        }\r\n\r\n        callbackStorage[controllerName] = callback;\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}