{"version":3,"sources":["directives/ewf-location/ewf-location-controller.js"],"names":[],"mappings":";;;qBAIwB,qBAAqB;;AAF7C,yBAAqB,CAAC,OAAO,GAAG,CAAC,iBAAiB,EAAE,mBAAmB,CAAC,CAAC;;AAE1D,aAAS,qBAAqB,CAAC,eAAe,EAAE,iBAAiB,EAAE;AAC9E,YAAM,EAAE,GAAG,IAAI,CAAC;AAChB,UAAE,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;;AAE7C,uBAAe,CAAC,sBAAsB,EAAE,CACnC,IAAI,CAAC,UAAC,SAAS,EAAK;AACjB,cAAE,CAAC,kBAAkB,GAAG,SAAS,CAAC;SACrC,CAAC,CAAC;;AAEP,iBAAS,mBAAmB,CAAC,WAAW,EAAE;AACtC,6BAAiB,CAAC,4BAA4B,CAAC,WAAW,CAAC,CAAC;SAC/D;KACJ","file":"directives/ewf-location/ewf-location-controller.js","sourcesContent":["import './../../services/location-service';\r\n\r\nEwfLocationController.$inject = ['locationService', 'navigationService'];\r\n\r\nexport default function EwfLocationController(locationService, navigationService) {\r\n    const vm = this;\r\n    vm.logInAnotherCountry = logInAnotherCountry;\r\n\r\n    locationService.loadAvailableLocations()\r\n        .then((locations) => {\r\n            vm.availableLocations = locations;\r\n        });\r\n\r\n    function logInAnotherCountry(countryCode) {\r\n        navigationService.redirectToLoginWithCountryId(countryCode);\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}