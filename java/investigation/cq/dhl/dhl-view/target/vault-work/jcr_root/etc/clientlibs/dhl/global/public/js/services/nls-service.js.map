{"version":3,"sources":["services/nls-service.js"],"names":[],"mappings":"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","file":"services/nls-service.js","sourcesContent":["import ewf from 'ewf';\r\nimport './throttle-service';\r\n\r\newf.service('nlsService', NlsService);\r\n\r\nNlsService.$inject = ['$http', '$q', 'logService', 'navigationService', 'throttleService'];\r\n\r\nconst DICTIONARY_FAILED_TO_LOAD = 'Dictionary failed to load';\r\nconst DICTIONARY_REQUEST_PENDING = 'Dictionary request pending';\r\n\r\nexport default function NlsService($http, $q, logService, navigationService, throttleService) {\r\n\r\n    const publicApi = {\r\n        translate,\r\n        isValidKey,\r\n        getDictionary,\r\n        getTranslation,\r\n        getTranslationSync\r\n    };\r\n\r\n    /**\r\n     * dictionaries = {\r\n     *      dictionaryName: {\r\n     *          translation_id: \"translation\"\r\n     *      }\r\n     * }\r\n     */\r\n    const dictionaries = {};\r\n\r\n    /**\r\n     * Creates a lazy function from factory function\r\n     * @param {Function} factoryFunction\r\n     */\r\n    const requestDictionaries = lazyFn(() =>\r\n        throttleService.createThrottleFunction(\r\n            function aggregationFunction(dictionaryNames, dictionaryName) {\r\n                let result = dictionaryNames;\r\n\r\n                if (!result) {\r\n                    result = [dictionaryName];\r\n                } else if (!result.includes(dictionaryName)) {\r\n                    result.push(dictionaryName);\r\n                }\r\n\r\n                return result;\r\n            },\r\n\r\n            function throttleHandler(dictionaryNames) {\r\n                const countryLang = navigationService.getCountryLang();\r\n\r\n                return $http.get('/services/dhl/nls/resources', {\r\n                    params: {\r\n                        countryCode: countryLang.countryId,\r\n                        languageCode: countryLang.langId,\r\n                        dictionaries: dictionaryNames\r\n                    }\r\n                })\r\n                    .then((response) => {\r\n                        const collection = response.data;\r\n\r\n                        Object.keys(collection).forEach((dictionaryName) => {\r\n                            if (!dictionaryNames.includes(dictionaryName)) {\r\n                                logService.warn(`Received dictionary \"${dictionaryName}\", which wasn't requested!`);\r\n                            } else {\r\n                                dictionaries[dictionaryName] = collection[dictionaryName];\r\n                            }\r\n                        });\r\n\r\n                        return collection;\r\n                    })\r\n                    .catch((response) => {\r\n                        logService.error(`Error while requesting dictionaries ${JSON.stringify(dictionaryNames)}`);\r\n                        return $q.reject(response);\r\n                    })\r\n                    .finally(() => {\r\n                        dictionaryNames.forEach(function(dictionaryName) {\r\n                            // Prevent unresolved dictionaries from being queried another time\r\n                            dictionaries[dictionaryName] = dictionaries[dictionaryName] || DICTIONARY_FAILED_TO_LOAD;\r\n                        });\r\n                    });\r\n            }\r\n        )\r\n    );\r\n\r\n    /**\r\n     * Creates a lazy function from factory function\r\n     * @param {Function} factoryFunction\r\n     * @returns {Function}\r\n     */\r\n    function lazyFn(factoryFunction) {\r\n        let fn = null;\r\n\r\n        return function(...args) {\r\n            return (fn || (fn = factoryFunction())).apply(this, args);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @param {String} fullKey in form 'dictionaryName.key'\r\n     * @returns {boolean} true if `fullKey` is valid nls key\r\n     */\r\n    function isValidKey(fullKey) {\r\n        return fullKey.match(/\\w+\\.\\w+/);\r\n    }\r\n\r\n    /**\r\n     * Creates a lazy function from factory function\r\n     * @param {String} dictionaryName is a dictionary name\r\n     * @returns {Object} dictionary {\"nls_key\": \"translation\"}\r\n     */\r\n    function getDictionary(dictionaryName) {\r\n        let dictionary = dictionaries[dictionaryName];\r\n\r\n        if (dictionary === DICTIONARY_FAILED_TO_LOAD) {\r\n            return $q.reject(`Dictionary \"${dictionaryName}\" was already requested but failed to load properly`);\r\n        }\r\n\r\n        if (dictionary === undefined) {\r\n            dictionary = dictionaries[dictionaryName] = DICTIONARY_REQUEST_PENDING;\r\n        }\r\n\r\n        if (dictionary === DICTIONARY_REQUEST_PENDING) {\r\n            return requestDictionaries(dictionaryName)\r\n                .then((throttleResultFn) => {\r\n                    return throttleResultFn().then(() => {\r\n                        const result = dictionaries[dictionaryName];\r\n\r\n                        if (result === DICTIONARY_FAILED_TO_LOAD) {\r\n                            return $q.reject(`Was unable to load dictionary \"${dictionaryName}\"`);\r\n                        }\r\n\r\n                        return $q.when(result);\r\n                    });\r\n                });\r\n        }\r\n\r\n        return $q.when(dictionary);\r\n    }\r\n\r\n    /**\r\n     * Async translate function, returns promise that will resolve to requested translation\r\n     * @param {String} fullKey is a key of form \"dictionaryName.translationKey\"\r\n     * @returns {Promise}\r\n     */\r\n    function getTranslation(fullKey) {\r\n        if (!publicApi.isValidKey(fullKey)) {\r\n            return $q.reject(`Wrong format \"${fullKey}\"`);\r\n        }\r\n\r\n        const [dictionaryName, translationKey] = fullKey.split('.');\r\n\r\n        return publicApi.getDictionary(dictionaryName).then((dictionary) => {\r\n            const translation = dictionary[translationKey];\r\n\r\n            return translation\r\n                ? $q.when(translation)\r\n                : $q.reject(`Requested key \"${translationKey}\" not found in dictionary \"${dictionaryName}\"`);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns translation synchronously under assumption that it was already requested\r\n     * @param {String} fullKey key in form 'dictionaryName.key'\r\n     * @returns {String} translation of fullKey\r\n     */\r\n    function getTranslationSync(fullKey) {\r\n        if (!publicApi.isValidKey(fullKey)) {\r\n            logService.warn(`Wrong format \"${fullKey}\"`);\r\n\r\n            return fullKey;\r\n        }\r\n\r\n        const [dictionaryName, key] = fullKey.split('.');\r\n        const dictionary = dictionaries[dictionaryName];\r\n\r\n        if (dictionary) {\r\n            const text = dictionary[key];\r\n            if (text) {\r\n                return text;\r\n            }\r\n\r\n            logService.warn(`Key \"${key}\" not found in dictionary \"${dictionary}\"`);\r\n\r\n            return fullKey;\r\n        }\r\n\r\n        logService.warn(`Dictionary \"${dictionary}\" not found, key: \"${fullKey}\"`);\r\n\r\n        return fullKey;\r\n    }\r\n\r\n    /**\r\n     * Returns translation synchronously with no assumption that it was already requested\r\n     * @param {String} fullKey\r\n     * @returns {String} translation of fullKey\r\n     */\r\n    function translate(fullKey) {\r\n        if (!publicApi.isValidKey(fullKey)) {\r\n            logService.warn(`Wrong format \"${fullKey}\"`);\r\n            return fullKey;\r\n        }\r\n\r\n        const [dictionaryName, key] = fullKey.split('.');\r\n        const dictionary = dictionaries[dictionaryName];\r\n\r\n        if (dictionary === DICTIONARY_REQUEST_PENDING) {\r\n            return fullKey;\r\n        }\r\n\r\n        if (!dictionary) {\r\n            getDictionary(dictionaryName); // Request dictionary if it wasn't requested yet\r\n\r\n            return fullKey;\r\n        }\r\n\r\n        return dictionary[key];\r\n    }\r\n\r\n    return publicApi;\r\n}\r\n"],"sourceRoot":"/source/"}