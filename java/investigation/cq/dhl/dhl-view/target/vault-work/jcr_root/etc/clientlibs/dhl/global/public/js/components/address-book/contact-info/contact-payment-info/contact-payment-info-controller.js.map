{"version":3,"sources":["components/address-book/contact-info/contact-payment-info/contact-payment-info-controller.js"],"names":[],"mappings":"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","file":"components/address-book/contact-info/contact-payment-info/contact-payment-info-controller.js","sourcesContent":["import angular from 'angular';\r\n\r\nEwfContactPaymentInfoController.$inject = ['$q', '$scope', '$attrs', 'ewfCrudService', 'attrsService'];\r\n\r\nexport default function EwfContactPaymentInfoController($q, $scope, $attrs, ewfCrudService, attrsService) {\r\n    const vm = this;\r\n    const selectOneOption = {\r\n        key: null,\r\n        type: null,\r\n        title: 'Select One'\r\n    };\r\n    const alternateDHLAccountOption = {\r\n        key: null,\r\n        type: 'ALTERNATE_DHLACCOUNT',\r\n        title: 'Alternate DHL Account Number'\r\n    };\r\n    const accountForShippingChargesOptions = [\r\n        {\r\n            key: null,\r\n            type: 'CREDIT_CARD',\r\n            title: 'Credit Card'\r\n        },\r\n        {\r\n            key: null,\r\n            type: 'PAYPAL',\r\n            title: 'PayPal'\r\n        },\r\n        {\r\n            key: null,\r\n            type: 'CASH',\r\n            title: 'Cash'\r\n        }\r\n    ];\r\n    const dutiesAndTaxesOptions = {\r\n        key: null,\r\n        type: 'RECEIVER_WILL_PAY',\r\n        title: 'Receiver Will Pay'\r\n    };\r\n\r\n    vm.attributes = {};\r\n\r\n    attrsService.track($scope, $attrs, 'paymentSettings', vm.attributes, function onChange(paymentSettings) {\r\n        if (!paymentSettings) {\r\n            return;\r\n        }\r\n\r\n        paymentSettings.defaultAccount = paymentSettings.defaultAccount || null;\r\n        paymentSettings.accountForShippingCharges = paymentSettings.accountForShippingCharges || null;\r\n        paymentSettings.accountForDuties = paymentSettings.accountForDuties || null;\r\n        paymentSettings.accountForTaxes = paymentSettings.accountForTaxes || null;\r\n        paymentSettings.splitDutiesAndTaxes = paymentSettings.splitDutiesAndTaxes || false;\r\n    });\r\n\r\n    vm.mapOption = mapOption;\r\n\r\n    init();\r\n\r\n    function mapOption(option) {\r\n        return option && (option.key || option.type);\r\n    }\r\n\r\n    //Mock for Support Utilities data\r\n    function getSupportInfoDataDefer() {\r\n        return $q.when(true);\r\n    }\r\n\r\n    //Mock for Selected Terms Of Trade data\r\n    function getSelectedTermOfTrade() {\r\n        return $q.when([\r\n            'CIP - Carriage and Insurance Paid To',\r\n            'CPT - Carriage Paid To',\r\n            'DAP - Delivered at Place',\r\n            'DAT - Delivered at Terminal',\r\n            'DDP - Delivered Duty Paid',\r\n            'EXW - Ex Works',\r\n            'FCA - Free Carrier'\r\n        ]);\r\n    }\r\n\r\n    function init() {\r\n        $q.all([getSupportInfoDataDefer(), getSelectedTermOfTrade(), getUserProfileAccounts()])\r\n            .then((responses) => {\r\n                const [supportInfo, selectedTermOfTrade] = responses;\r\n\r\n                vm.accountForDuties.push(dutiesAndTaxesOptions);\r\n                vm.accountForTaxes.push(dutiesAndTaxesOptions);\r\n\r\n                vm.accountForShippingCharges.push(alternateDHLAccountOption);\r\n                vm.accountForDuties.push(alternateDHLAccountOption);\r\n                vm.accountForTaxes.push(alternateDHLAccountOption);\r\n\r\n                if (vm.multipleDefaultAccounts) {\r\n                    vm.defaultAccount.unshift(selectOneOption);\r\n                }\r\n                vm.accountForShippingCharges.unshift(selectOneOption);\r\n                vm.accountForDuties.unshift(selectOneOption);\r\n                vm.accountForTaxes.unshift(selectOneOption);\r\n\r\n                if (supportInfo) {\r\n                    vm.accountForShippingCharges.push(...accountForShippingChargesOptions);\r\n                    vm.accountForDuties.push(...accountForShippingChargesOptions);\r\n                    vm.accountForTaxes.push(...accountForShippingChargesOptions);\r\n                }\r\n\r\n                vm.selectedTermOfTrade = selectedTermOfTrade;\r\n            });\r\n    }\r\n\r\n    function getUserProfileAccounts() {\r\n        return ewfCrudService.getElementList('/api/myprofile/accounts')\r\n            .then((accountsData) => {\r\n                vm.multipleDefaultAccounts = angular.isArray(accountsData) && accountsData.length > 1;\r\n                vm.isUserProfileAccounts = !!accountsData.length;\r\n                const formattedAccountsData = accountsData.map((accountData) => ({\r\n                    key: accountData.key,\r\n                    type: 'DHL_ACCOUNT',\r\n                    title: accountData.title,\r\n                    accountNickname: accountData.accountNickname\r\n                }));\r\n\r\n                const accountsSort = (first, second) => {\r\n                    return first.accountNickname.toLocaleUpperCase()\r\n                        .localeCompare(second.accountNickname.toLocaleUpperCase());\r\n                };\r\n\r\n                formattedAccountsData.sort(accountsSort);\r\n                if (vm.multipleDefaultAccounts) {\r\n                    vm.defaultAccount = angular.copy(formattedAccountsData);\r\n                }\r\n                vm.accountForShippingCharges = angular.copy(formattedAccountsData);\r\n                vm.accountForDuties = angular.copy(formattedAccountsData);\r\n                vm.accountForTaxes = angular.copy(formattedAccountsData);\r\n            });\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}