{"version":3,"sources":["directives/ewf-input-password/ewf-input-password-controller.js"],"names":[],"mappings":"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","file":"directives/ewf-input-password/ewf-input-password-controller.js","sourcesContent":["import 'services/rule-service';\r\nimport './../validation/services/validation-service';\r\n\r\n\r\nInputPasswordController.$inject = ['$scope', '$q', 'logService', 'ruleService', 'nlsService', 'validatorsFactory'];\r\n\r\nexport default function InputPasswordController($scope, $q, logService, ruleService, nlsService, validatorsFactory) {\r\n    const vm = this;\r\n    let rules = {};\r\n    // properties\r\n    vm.validationErrorMessage = {};\r\n    vm.validationIsVisible = false;\r\n\r\n    vm.fieldName = null;\r\n    vm.ngModelCtrl = null;\r\n    vm.ewfFormCtrl = null;\r\n    vm.validateFieldEx = validateFieldEx;\r\n\r\n    //methods\r\n    vm.init = init;\r\n    vm.validateRule = validateRule;\r\n\r\n    function init(fieldId, ngModelController) {\r\n        vm.fieldId = fieldId;\r\n        vm.fieldName = fieldId.split('.')[1];\r\n        vm.ngModelController = ngModelController;\r\n\r\n        initializeRules();\r\n    }\r\n\r\n    function initializeRules() {\r\n        const formOptions = vm.ewfFormCtrl.options;\r\n        const countryId = formOptions ? formOptions.countryId : null;\r\n\r\n        // ruleService is async, but we get rule synchronously\r\n        const formFields = ruleService.getFieldRules(vm.fieldId, countryId);\r\n        if (formFields) {\r\n            rules = formFields;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validate an input field\r\n     * @returns new model Value\r\n     */\r\n    function validateFieldEx() {\r\n        if (!rules.validators) {\r\n            return vm.ngModelController.$modelValue;\r\n        }\r\n\r\n        vm.validationErrorMessage[vm.fieldName] = {};\r\n        const validationErrorMessages = vm.validationErrorMessage[vm.fieldName];\r\n        let allRulesPassed = true;\r\n\r\n        const validationErrorPromises = [];\r\n        for (let rule of rules.validators) {\r\n            const functionName = rule.type;\r\n            const viewValue = vm.ngModelController.$viewValue;\r\n\r\n            const ruleValid = validateRule(viewValue, functionName, rule.params);\r\n            const resObject = {\r\n                translation: rule.msg,\r\n                functionName,\r\n                viewValue: viewValue || '',\r\n                validateParams: rule.params,\r\n                isRuleValid: ruleValid\r\n            };\r\n\r\n            if (!validationErrorMessages.hasOwnProperty(functionName)) {\r\n                validationErrorMessages[functionName] = [];\r\n            }\r\n\r\n            const ruleIndex = validationErrorMessages[functionName].push(resObject) - 1;\r\n            validationErrorPromises.push(\r\n                populateValidationErrorObject(validationErrorMessages, functionName, ruleIndex)\r\n            );\r\n\r\n            if (!ruleValid && allRulesPassed) {\r\n                allRulesPassed = false;\r\n            }\r\n        }\r\n\r\n        vm.ngModelController.$setValidity(vm.fieldName, allRulesPassed);\r\n        $q.all(validationErrorPromises).then(broadcastValidationCompleteEvent, broadcastValidationCompleteEvent);\r\n\r\n        return vm.ngModelController.$modelValue;\r\n    }\r\n\r\n    function broadcastValidationCompleteEvent() {\r\n        $scope.$emit('ValidationComplete', vm.validationErrorMessage[vm.fieldName]);\r\n    }\r\n\r\n    function validateRule(viewValue, functionName, param) {\r\n        const validateFunction = validatorsFactory.createValidator(functionName, param);\r\n        let valid = true;\r\n        if (validateFunction) {\r\n            try {\r\n                valid = validateFunction.validate(viewValue, param);\r\n            } catch (error) {\r\n                logService.error('During validation of field \"' + vm.fieldName +\r\n                                        '\" validator ' + functionName + ' threw error' + error);\r\n            }\r\n        }\r\n\r\n        return valid;\r\n    }\r\n\r\n    // TODO: Unite with rule approach ( after injecting errorDisplayService)\r\n    function populateValidationErrorObject(validationErrorMessages, functionName, ruleIndex) {\r\n        const validationItem = validationErrorMessages[functionName][ruleIndex];\r\n        return nlsService.getTranslation(validationItem.translation)\r\n            .then((translation) => {\r\n                if (translation) {\r\n                    validationItem.translation = translation;\r\n                } else {\r\n                    logService.error('There is no message for label: ' + validationItem.translation);\r\n                }\r\n            })\r\n            .catch((message) => {\r\n                logService.error('There is no message for label:' + validationItem.translation +\r\n                                        ', because ' + message);\r\n                return $q.reject();\r\n            });\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}