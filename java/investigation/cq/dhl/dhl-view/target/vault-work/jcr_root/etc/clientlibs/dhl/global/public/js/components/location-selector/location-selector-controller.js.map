{"version":3,"sources":["components/location-selector/location-selector-controller.js"],"names":[],"mappings":";;;qBAYwB,0BAA0B;;AAVlD,8BAA0B,CAAC,OAAO,GAAG,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,EAAE,iBAAiB,CAAC,CAAC;;;;;;;;;;;AAU3F,aAAS,0BAA0B,CAAC,UAAU,EAAE,iBAAiB,EAAE,UAAU,EAAE,eAAe,EAAE;AAC3G,YAAM,EAAE,GAAG,IAAI,CAAC;;AAEhB,UAAE,CAAC,gBAAgB,GAAG,IAAI,CAAC;AAC3B,UAAE,CAAC,kBAAkB,GAAG,EAAE,CAAC;AAC3B,UAAE,CAAC,eAAe,GAAG,IAAI,CAAC;AAC1B,UAAE,CAAC,KAAK,GAAG,IAAI,CAAC;;AAEhB,UAAE,CAAC,YAAY,GAAG,YAAY,CAAC;;AAE/B,YAAM,oBAAoB,GAAG,EAAE,CAAC,eAAe,GAAG,EAAE,CAAC;AACrD,YAAM,UAAU,GAAG,UAAU,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC;;AAE9D,uBAAe,CAAC,sBAAsB,EAAE,CACnC,IAAI,CAAC,UAAS,SAAS,EAAE;AACtB,sBAAU,CACL,IAAI,CAAC,UAAS,UAAU,EAAE;AACvB,yBAAS,CAAC,OAAO,CAAC,UAAS,QAAQ,EAAE;AACjC,wBAAI,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC;AAC1B,wBAAI,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;AAC5B,wBAAI,IAAI,EAAE;AACN,gCAAQ,CAAC,IAAI,GAAG,IAAI,CAAC;qBACxB;iBACJ,CAAC,CAAC;AACH,gCAAgB,CAAC,SAAS,EAAE,UAAU,CAAC,iBAAiB,CAAC,CAAC;aAC7D,CAAC,SACI,CAAC,UAAS,KAAK,EAAE;AACnB,0BAAU,CAAC,IAAI,CAAC,8CAA8C,GAAG,KAAK,CAAC,CAAC;AACxE,gCAAgB,CAAC,SAAS,EAAE,mBAAmB,CAAC,CAAC;aACpD,CAAC,CAAC;SACV,CAAC,SACI,CAAC,UAAC,KAAK,EAAK;AACd,sBAAU,CAAC,KAAK,CAAC,kBAAkB,GAAG,KAAK,CAAC,CAAC;AAC7C,cAAE,CAAC,KAAK,GAAG,kCAAkC,CAAC;SACjD,CAAC,CAAC;;AAEP,iBAAS,gBAAgB,CAAC,SAAS,EAAE,kBAAkB,EAAE;AACrD,gCAAoB,CAAC,IAAI,GAAG,kBAAkB,CAAC;AAC/C,cAAE,CAAC,kBAAkB,GAAG,SAAS,CAAC;AAClC,cAAE,CAAC,kBAAkB,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;AACpD,gBAAM,aAAa,GAAG,eAAe,CAAC,gBAAgB,EAAE,CAAC;AACzD,gBAAI,aAAa,EAAE;AACf,kBAAE,CAAC,eAAe,GAAG,SAAS,CAAC,IAAI,CAAC,UAAC,QAAQ;2BAAK,QAAQ,CAAC,KAAK,KAAK,aAAa,CAAC,KAAK;iBAAA,CAAC,CAAC;aAC7F;AACD,cAAE,CAAC,KAAK,GAAG,IAAI,CAAC;SACnB;;AAED,iBAAS,YAAY,GAAG;AACpB,gBAAI,eAAe,GAAG,EAAE,CAAC,eAAe,CAAC;AACzC,gBAAI,eAAe,IAAI,eAAe,CAAC,KAAK,EAAE;AAC1C,oBAAI,EAAE,CAAC,gBAAgB,EAAE;AACrB,mCAAe,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC;iBAChD;AACD,iCAAiB,CAAC,4BAA4B,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;aACzE;SACJ;KACJ","file":"components/location-selector/location-selector-controller.js","sourcesContent":["import './../../services/location-service';\r\n\r\nLocationSelectorController.$inject = ['logService', 'navigationService', 'nlsService', 'locationService'];\r\n\r\n/**\r\n * Location selector controller\r\n *\r\n * @param {logService} logService\r\n * @param {navigationService} navigationService\r\n * @param {nlsService} nlsService\r\n * @param {locationService} locationService\r\n */\r\nexport default function LocationSelectorController(logService, navigationService, nlsService, locationService) {\r\n    const vm = this;\r\n    //properties\r\n    vm.rememberLocation = true;\r\n    vm.availableLocations = [];\r\n    vm.currentLocation = null;\r\n    vm.error = null;\r\n    // methods\r\n    vm.saveLocation = saveLocation;\r\n\r\n    const chooseLocationOption = vm.currentLocation = {};\r\n    const nlsPromise = nlsService.getDictionary('selectlocation');\r\n\r\n    locationService.loadAvailableLocations()\r\n        .then(function(locations) {\r\n            nlsPromise\r\n                .then(function(dictionary) {\r\n                    locations.forEach(function(location) {\r\n                        let code = location.code3;\r\n                        let text = dictionary[code];\r\n                        if (text) {\r\n                            location.name = text;\r\n                        }\r\n                    });\r\n                    displayLocations(locations, dictionary.choose_a_location);\r\n                })\r\n                .catch(function(error) {\r\n                    logService.warn('failed to get dictionary \"select location\": ' + error);\r\n                    displayLocations(locations, 'Choose a location');\r\n                });\r\n        })\r\n        .catch((error) => {\r\n            logService.error('locationService ' + error);\r\n            vm.error = 'Service is currently unavailable';\r\n        });\r\n\r\n    function displayLocations(locations, chooseLocationText) {\r\n        chooseLocationOption.name = chooseLocationText;\r\n        vm.availableLocations = locations;\r\n        vm.availableLocations.unshift(chooseLocationOption);\r\n        const storedCountry = locationService.getStoredCountry();\r\n        if (storedCountry) {\r\n            vm.currentLocation = locations.find((location) => location.code3 === storedCountry.code3);\r\n        }\r\n        vm.error = null;\r\n    }\r\n\r\n    function saveLocation() {\r\n        let currentLocation = vm.currentLocation;\r\n        if (currentLocation && currentLocation.code3) {\r\n            if (vm.rememberLocation) {\r\n                locationService.saveCountry(currentLocation);\r\n            }\r\n            navigationService.redirectToLoginWithCountryId(currentLocation.code3);\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}