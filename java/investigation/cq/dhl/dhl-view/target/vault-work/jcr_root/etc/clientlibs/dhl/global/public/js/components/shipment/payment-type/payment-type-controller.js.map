{"version":3,"sources":["components/shipment/payment-type/payment-type-controller.js"],"names":[],"mappings":"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","file":"components/shipment/payment-type/payment-type-controller.js","sourcesContent":["import 'services/rule-service';\r\nimport './payment-type-service';\r\nimport EwfShipmentStepBaseController from '../ewf-shipment-step-base-controller';\r\n\r\nPaymentTypeController.$inject = [\r\n    '$q',\r\n    '$timeout',\r\n    'logService',\r\n    'nlsService',\r\n    'userService',\r\n    'shipmentService',\r\n    'paymentTypeService',\r\n    'ruleService'\r\n];\r\n\r\nPaymentTypeController.prototype = new EwfShipmentStepBaseController('payment-details');\r\n\r\nexport default function PaymentTypeController(\r\n    $q,\r\n    $timeout,\r\n    logService,\r\n    nlsService,\r\n    userService,\r\n    shipmentService,\r\n    paymentTypeService,\r\n    ruleService) {\r\n    const vm = this;\r\n\r\n    let shipmentContactIdsFiltered = {};\r\n\r\n    const PAYMENT_DETAILS_FIELDS = {\r\n        QUOTATION: 'quotationType',\r\n        TRANSPORTATION: 'transportationPaymentType',\r\n        DUTIES: 'dutiesPaymentType',\r\n        TAXES: 'taxesPaymentType',\r\n        INCOTERM: 'incoterm'\r\n    };\r\n\r\n    const paymentDetailsCache = {};\r\n\r\n    Object.assign(vm, {\r\n        LOADING_OPTION: {\r\n            name: 'common.loading_message'\r\n        },\r\n\r\n        PAYMENT_TYPES: paymentTypeService.PAYMENT_TYPES,\r\n\r\n        onInit,\r\n        onEdit,\r\n        onNextClick,\r\n        onEditClick,\r\n        clearError,\r\n        isErrorOnType,\r\n        resolvePaymentTypeName,\r\n        howPayCheckboxChanged,\r\n        validateAlternateDhlAccount,\r\n        onAlternateDhlAccountFocus,\r\n        onAssociationCheckboxChanged,\r\n        isTransportationShown,\r\n        isDutiesAndTaxesShown,\r\n        isPaymentTypeAlternateAccountShown,\r\n        getDutiesAndTaxesLabel,\r\n        onQuotationTypeSelectorChanged: onDropdownSelectorChanged.bind(vm, PAYMENT_DETAILS_FIELDS.QUOTATION),\r\n        onTransportationPaymentTypeSelectorChanged:\r\n            onDropdownSelectorChanged.bind(vm, PAYMENT_DETAILS_FIELDS.TRANSPORTATION),\r\n        onDutiesPaymentTypeSelectorChanged: onDropdownSelectorChanged.bind(vm, PAYMENT_DETAILS_FIELDS.DUTIES),\r\n        onTaxesPaymentTypeSelectorChanged: onDropdownSelectorChanged.bind(vm, PAYMENT_DETAILS_FIELDS.TAXES),\r\n        isIncotermShown,\r\n        resolveIncotermName,\r\n        getCurrentIncompleteData,\r\n        isCreditCardPayment,\r\n        loadShipmentData,\r\n        isQuotationTypeShown,\r\n\r\n        paymentAccounts: {\r\n            shippers: [],\r\n            others: []\r\n        },\r\n        quotationType: '',\r\n        transportationPaymentType: '',\r\n        dutiesPaymentType: '',\r\n        taxesPaymentType: '',\r\n        paymentTypesErrors: {},\r\n        checkedForTransportationCharges: true,\r\n        alternateDhlAccount: {\r\n            accountNumber: '',\r\n            valid: true\r\n        },\r\n        dutiesAlternateDhlAccount: {\r\n            accountNumber: '',\r\n            valid: true\r\n        },\r\n        taxesAlternateDhlAccount: {\r\n            accountNumber: '',\r\n            valid: true\r\n        },\r\n        pendingValidation: false,\r\n        checkedForPaymentAssociation: false,\r\n        splitDutyAndTaxPayment: false,\r\n        incoterm: '',\r\n        isPaymentSplitterShown: false,\r\n        formName: 'paymentType',\r\n        shipmentType: ''\r\n    });\r\n\r\n    function onInit() {\r\n        nlsService.getDictionary('common');\r\n    }\r\n\r\n    function onEdit() {\r\n        vm.shipmentCountry = shipmentService.getShipmentCountry();\r\n        vm.paymentTypesErrors = {};\r\n        vm.pendingPaymentTypes = true;\r\n\r\n        ruleService\r\n            .acquireRulesForFormFields(vm.formName, vm.shipmentCountry)\r\n            .then(processRules);\r\n\r\n        if (userService.isAuthorized()) {\r\n            getContacts();\r\n            if (vm.associateWithContacts.length && !vm.associateWithContacts.includes(vm.associatedContact)) {\r\n                vm.associatedContact = vm.associateWithContacts[0];\r\n            }\r\n        }\r\n\r\n        vm.isDefaultIncotermSet = $q.defer();\r\n\r\n        setPaymentValuesToCache();\r\n        getShipmentType();\r\n        getPaymentTypeList(shipmentContactIdsFiltered);\r\n        if (vm.isIncotermShown()) {\r\n            getIncotermsList();\r\n        }\r\n        validateAlternateAccounts();\r\n    }\r\n\r\n    function processRules(rules) {\r\n        if (rules.splitDutyAndTaxPayment) {\r\n            vm.isPaymentSplitterShown = rules.splitDutyAndTaxPayment.props.visible;\r\n        }\r\n    }\r\n\r\n    function getContacts() {\r\n        // Renew existed contacts from address details step\r\n        vm.associateWithContacts = [];\r\n\r\n        const shipmentContacts = shipmentService.getContactsKeys();\r\n        if (shipmentContacts.toContactKey !== '00') {\r\n            shipmentContactIdsFiltered.toContactKey = shipmentContacts.toContactKey;\r\n            const contact = {\r\n                id: shipmentContacts.toContactKey,\r\n                name: nlsService.getTranslationSync('shipment.payment_type_ship_to_address')\r\n            };\r\n            vm.associateWithContacts.push(contact);\r\n        }\r\n        if (shipmentContacts.fromContactKey !== '00') {\r\n            shipmentContactIdsFiltered.fromContactKey = shipmentContacts.fromContactKey;\r\n            const contact = {\r\n                id: shipmentContacts.fromContactKey,\r\n                name: nlsService.getTranslationSync('shipment.payment_type_ship_from_address')\r\n            };\r\n            vm.associateWithContacts.push(contact);\r\n        }\r\n    }\r\n\r\n    function getPaymentTypeList(keys) {\r\n        const filterDutiesAndTaxes = vm.isDutiesAndTaxesShown();\r\n        vm.paymentAccounts.others = [vm.LOADING_OPTION];\r\n        vm.paymentAccounts.shippers = [];\r\n        vm.paymentAccounts.duties = [vm.LOADING_OPTION];\r\n\r\n        paymentTypeService.getPaymentTypeList(vm.shipmentCountry, keys, vm.shipmentType, filterDutiesAndTaxes)\r\n            .then(processPaymentTypeData)\r\n            .then(setPaymentTypeOptionsToModel);\r\n    }\r\n\r\n    function processPaymentTypeData(data) {\r\n        filterPaymentTypeList(data.paymentOptions);\r\n        if (data.defaults) {\r\n            filterDefaultValues(data.defaults);\r\n        }\r\n    }\r\n\r\n    function filterPaymentTypeList(list) {\r\n        let shippers = [];\r\n        vm.paymentAccounts.others = [];\r\n        vm.paymentAccounts.shippers = [];\r\n        vm.paymentAccounts.duties = [];\r\n\r\n        for (let item of list) {\r\n            if (item.paymentType !== vm.PAYMENT_TYPES.RECEIVER_WILL_PAY) {\r\n                if (item.shipper) {\r\n                    shippers.push(item);\r\n                } else {\r\n                    vm.paymentAccounts.others.push(item);\r\n                }\r\n            }\r\n            fillDutiesPaymentTypeList(item);\r\n        }\r\n\r\n        if (shippers.length === 1) {\r\n            vm.paymentAccounts.others.unshift(shippers[0]);\r\n        } else if (shippers.length) {\r\n            vm.paymentAccounts.shippers = shippers;\r\n        }\r\n    }\r\n\r\n    function fillDutiesPaymentTypeList(item) {\r\n        if (item.paymentType === vm.PAYMENT_TYPES.RECEIVER_WILL_PAY) {\r\n            vm.paymentAccounts.duties.unshift(item);\r\n        } else if (item.paymentType === vm.PAYMENT_TYPES.DHL_ACCOUNT ||\r\n            item.paymentType === vm.PAYMENT_TYPES.ALTERNATE_DHLACCOUNT) {\r\n            vm.paymentAccounts.duties.push(item);\r\n        }\r\n    }\r\n\r\n    function filterDefaultValues(defaults) {\r\n        vm.dutiesDefaultOption = defaults.duties;\r\n        vm.taxesDefaultOption = defaults.taxes;\r\n    }\r\n\r\n    function getShipmentType() {\r\n        const destinationCountry = shipmentService.getDestinationCountry();\r\n        const profileCountry = userService.getUserCountry();\r\n\r\n        if (profileCountry !== vm.shipmentCountry && profileCountry !== destinationCountry) {\r\n            return;\r\n        }\r\n\r\n        if (vm.shipmentCountry === destinationCountry) {\r\n            vm.shipmentType = paymentTypeService.SHIPMENT_TYPES.DOMESTIC;\r\n            return;\r\n        }\r\n\r\n        vm.shipmentType = (profileCountry === vm.shipmentCountry) ?\r\n            paymentTypeService.SHIPMENT_TYPES.EXPORT :\r\n            paymentTypeService.SHIPMENT_TYPES.IMPORT;\r\n    }\r\n\r\n    function setPaymentTypeOptionsToModel() {\r\n        setPaymentDetailsOption(PAYMENT_DETAILS_FIELDS.QUOTATION, vm.paymentAccounts.shippers);\r\n        setPaymentDetailsOption(PAYMENT_DETAILS_FIELDS.TRANSPORTATION, vm.paymentAccounts.others);\r\n\r\n        if (vm.isDutiesAndTaxesShown()) {\r\n            setDutiesAndTaxesOptions();\r\n        }\r\n        vm.pendingPaymentTypes = false;\r\n    }\r\n\r\n    function setDutiesAndTaxesOptions() {\r\n        if (paymentDetailsCache.dutiesPaymentType) {\r\n            setPaymentDetailsOption(PAYMENT_DETAILS_FIELDS.DUTIES, vm.paymentAccounts.duties);\r\n        } else {\r\n            vm.dutiesPaymentType = vm.dutiesDefaultOption;\r\n        }\r\n\r\n        if (vm.splitDutyAndTaxPayment) {\r\n            setPaymentDetailsOption(PAYMENT_DETAILS_FIELDS.TAXES, vm.paymentAccounts.duties);\r\n        } else {\r\n            vm.taxesPaymentType = vm.taxesDefaultOption;\r\n        }\r\n\r\n        if (vm.isDefaultIncotermSet) {\r\n            vm.isDefaultIncotermSet.resolve();\r\n        }\r\n    }\r\n\r\n    function setPaymentDetailsOption(option, types) {\r\n        if (paymentDetailsCache[option]) {\r\n            vm[option] = (option === PAYMENT_DETAILS_FIELDS.INCOTERM)\r\n                ? findIncotermOption(paymentDetailsCache[option])\r\n                : paymentTypeService.getAssociatedOption(types, paymentDetailsCache[option]);\r\n            if (!vm[option]) {\r\n                if (option === PAYMENT_DETAILS_FIELDS.DUTIES) {\r\n                    vm[option] = vm.dutiesDefaultOption;\r\n                } else if (option === PAYMENT_DETAILS_FIELDS.TAXES) {\r\n                    vm[option] = vm.taxesDefaultOption;\r\n                }\r\n            }\r\n            if (vm[option]) {\r\n                callAccountValidator(option);\r\n            }\r\n        }\r\n    }\r\n\r\n    function onDropdownSelectorChanged(type) {\r\n        if (vm[type] === vm.LOADING_OPTION) {\r\n            vm[type] = '';\r\n            return;\r\n        }\r\n        callAccountValidator(type);\r\n\r\n        if ((type === PAYMENT_DETAILS_FIELDS.DUTIES || type === PAYMENT_DETAILS_FIELDS.TAXES)\r\n            && vm.isIncotermShown()) {\r\n            setIncotermByDutiesAndTaxesOption();\r\n        }\r\n    }\r\n\r\n    function callAccountValidator(type) {\r\n        if (type !== PAYMENT_DETAILS_FIELDS.INCOTERM && vm.paymentTypeForm[type]) {\r\n            validateAccount(vm[type], vm.paymentTypeForm[type]);\r\n        }\r\n    }\r\n\r\n    function validateAlternateAccounts() {\r\n        if (vm.alternateDhlAccount.accountNumber) {\r\n            validateAlternateDhlAccount(vm.alternateDhlAccount, vm.paymentTypeForm.payAccountNumber);\r\n        }\r\n\r\n        if (vm.dutiesAlternateDhlAccount.accountNumber && isDutiesAndTaxesShown()) {\r\n            validateAlternateDhlAccount(vm.dutiesAlternateDhlAccount, vm.paymentTypeForm.dutiesAccountNumber);\r\n        }\r\n\r\n        if (vm.taxesAlternateDhlAccount.accountNumber && isDutiesAndTaxesShown()) {\r\n            validateAlternateDhlAccount(vm.taxesAlternateDhlAccount, vm.paymentTypeForm.taxesAccountNumber);\r\n        }\r\n    }\r\n\r\n    function getIncotermsList() {\r\n        vm.incoterms = [vm.LOADING_OPTION];\r\n        vm.pendingIncoterms = true;\r\n\r\n        paymentTypeService.getIncoterms(vm.shipmentCountry)\r\n            .then(processIncotermsData);\r\n    }\r\n\r\n    function processIncotermsData(data) {\r\n        vm.incoterms = data.incoterms;\r\n        if (data.defaultIncotermCode) {\r\n            vm.defaultIncoterm = findIncotermOption({code: data.defaultIncotermCode});\r\n        }\r\n        setIncotermOptionToModel();\r\n    }\r\n\r\n    function setIncotermOptionToModel() {\r\n        if (vm.incoterm) {\r\n            setPaymentDetailsOption(PAYMENT_DETAILS_FIELDS.INCOTERM, vm.incoterms);\r\n        }\r\n\r\n        if (!vm.incoterm) {\r\n            getIncotermValue();\r\n        }\r\n    }\r\n\r\n    function getIncotermValue() {\r\n        if (vm.defaultIncoterm) {\r\n            vm.incoterm = vm.defaultIncoterm;\r\n        } else {\r\n            vm.isDefaultIncotermSet.promise.then(setIncotermByDutiesAndTaxesOption);\r\n        }\r\n    }\r\n\r\n    function setIncotermByDutiesAndTaxesOption() {\r\n        const data = {\r\n            dutiesTypeSelected: vm.dutiesPaymentType,\r\n            taxesTypeSelected: vm.taxesPaymentType,\r\n            splitDutiesAndTaxes: vm.splitDutyAndTaxPayment\r\n        };\r\n        const defaultVal = paymentTypeService.getIncotermDefaultValueForDutiesAndTaxes(data);\r\n        if (defaultVal) {\r\n            vm.incoterm = findIncotermOption(defaultVal) || vm.incoterm;\r\n        }\r\n    }\r\n\r\n    function findIncotermOption(selectedIncoterm) {\r\n        return vm.incoterms.find((item) => (selectedIncoterm.code === item.code));\r\n    }\r\n\r\n    function resolvePaymentTypeName(option, markDefault = false) {\r\n        let name;\r\n        if (option.paymentType === vm.PAYMENT_TYPES.DHL_ACCOUNT) {\r\n            name = option.name ? `${option.name} ${option.accountNumber}` : option.accountNumber;\r\n        } else {\r\n            name = nlsService.getTranslationSync(option.name);\r\n        }\r\n        option.title = name;\r\n\r\n        if (markDefault && angular.equals(vm.dutiesDefaultOption, option)) {\r\n            name = `EWF - dhl-view (default)`;\r\n        }\r\n        return name;\r\n    }\r\n\r\n    function resolveIncotermName(option) {\r\n        if (option.code) {\r\n            const name = option.code.toLowerCase();\r\n            const description = nlsService.getTranslationSync(`shipment.payment_type_incoterm_EWF - dhl-view`);\r\n            return `${option.code} - All of the CQ component and template definitions for the DHL project.

        During development, the files in this module should be sync'd to your CQ instance using the FileVault command
        line tool available with CQ. There is also a plugin for Eclipse called "vaultclipse" that can be used instead
        of the command line tool.`;\r\n        }\r\n    }\r\n\r\n    function onNextClick(form) {\r\n        if (vm.pendingPaymentTypes) {\r\n            clearPaymentsTypeSelection();\r\n            triggerFormValidation(form);\r\n        }\r\n        vm.nextStepDeferred = $q.defer();\r\n        vm.nextStepDeferred.promise.then(() => {\r\n            triggerFormValidation(form);\r\n            if (form.$valid) {\r\n                vm.nextCallback();\r\n                vm.clearError();\r\n                if (!isTransportationShown()) {\r\n                    vm.transportationPaymentType = vm.quotationType;\r\n                }\r\n                if (!isQuotationTypeShown()) {\r\n                    vm.quotationType = vm.transportationPaymentType;\r\n                }\r\n                setPaymentInfoToShipmentService();\r\n                clearUnusedFieldsContent();\r\n                if (isIncotermShown()) {\r\n                    setIncotermToShipmentService();\r\n                }\r\n            }\r\n        });\r\n\r\n        if (!vm.pendingValidation && !vm.pendingPaymentTypes) {\r\n            vm.nextStepDeferred.resolve();\r\n        }\r\n    }\r\n\r\n    function getCurrentIncompleteData() {\r\n        if (!isTransportationShown()) {\r\n            vm.transportationPaymentType = vm.quotationType;\r\n        }\r\n        setPaymentInfoToShipmentService();\r\n        clearUnusedFieldsContent();\r\n        if (isIncotermShown()) {\r\n            setIncotermToShipmentService();\r\n        }\r\n    }\r\n\r\n    function validateAccount(type, field) {\r\n        if (type && type.paymentType === vm.PAYMENT_TYPES.DHL_ACCOUNT) {\r\n            vm.pendingValidation = true;\r\n            paymentTypeService.validatePaymentAccount(type, vm.shipmentType)\r\n                .then(() => {\r\n                    onValidationSuccess(type);\r\n                })\r\n                .catch((errorCode) => {\r\n                    onValidationError(errorCode, type);\r\n                })\r\n                .finally(function() {\r\n                    triggerFieldValidation(field, true);\r\n                });\r\n        } else {\r\n            triggerFieldValidation(field, true);\r\n        }\r\n    }\r\n\r\n    function onValidationSuccess(type) {\r\n        if (vm.paymentTypesErrors[type.title]) {\r\n            vm.paymentTypesErrors[type.title] = false;\r\n        }\r\n    }\r\n\r\n    function onValidationError(errorCode, type) {\r\n        vm.paymentTypesErrors[type.title] = errorCode;\r\n    }\r\n\r\n    function clearError() {\r\n        vm.paymentTypesErrors = {};\r\n    }\r\n\r\n    function validateAlternateDhlAccount(dhlAccount, field) {\r\n        markAlternateDhlAccountValid(dhlAccount);\r\n        if (dhlAccount.accountNumber === '') {\r\n            triggerFieldValidation(field, true);\r\n            return;\r\n        }\r\n        const type = {\r\n            paymentType: vm.PAYMENT_TYPES.ALTERNATE_DHLACCOUNT,\r\n            accountNumber: dhlAccount.accountNumber\r\n        };\r\n        vm.pendingValidation = true;\r\n        paymentTypeService.validatePaymentAccount(type, vm.shipmentType)\r\n            .then(() => {\r\n                markAlternateDhlAccountValid(dhlAccount);\r\n            })\r\n            .catch((errorCode) => {\r\n                onValidationDhlAccountError(dhlAccount, errorCode);\r\n            })\r\n            .finally(() => {\r\n                triggerFieldValidation(field, true);\r\n            });\r\n    }\r\n\r\n    function onAlternateDhlAccountFocus() {\r\n        vm.pendingValidation = true;\r\n    }\r\n\r\n    function triggerFieldValidation(field, withTimeout = false) {\r\n        if (withTimeout) {\r\n            $timeout(fieldValidation);\r\n        } else {\r\n            fieldValidation();\r\n        }\r\n\r\n        function fieldValidation() {\r\n            field.$dirty = true;\r\n            field.$setViewValue(field.$viewValue);\r\n            vm.pendingValidation = false;\r\n            if (vm.nextStepDeferred) {\r\n                vm.nextStepDeferred.resolve();\r\n            }\r\n        }\r\n    }\r\n\r\n    function triggerFormValidation(form) {\r\n        Object.keys(form).forEach((key) => {\r\n            if (form[key].$setViewValue) {\r\n                triggerFieldValidation(form[key]);\r\n            }\r\n        });\r\n    }\r\n\r\n    function markAlternateDhlAccountValid(dhlAccount) {\r\n        dhlAccount.valid = true;\r\n        dhlAccount.message = '';\r\n    }\r\n\r\n    function onValidationDhlAccountError(dhlAccount, errorCode) {\r\n        dhlAccount.valid = false;\r\n        dhlAccount.message = errorCode;\r\n    }\r\n\r\n    function onEditClick() {\r\n        //@todo: validate\r\n        vm.editCallback();\r\n    }\r\n\r\n    function isErrorOnType(type) {\r\n        return type ? !!vm.paymentTypesErrors[type.title] : false;\r\n    }\r\n\r\n    function howPayCheckboxChanged() {\r\n        vm.showOthers = !vm.checkedForTransportationCharges;\r\n    }\r\n\r\n    function onAssociationCheckboxChanged() {\r\n        if (vm.checkedForPaymentAssociation) {\r\n            shipmentService.setAssociateWithContactId(vm.associatedContact.id);\r\n        }\r\n    }\r\n\r\n    function setPaymentInfoToShipmentService() {\r\n        let data = {\r\n            transportationPaymentType: vm.transportationPaymentType.paymentType,\r\n            transportationPaymentAccountNumber: getAccountFromPaymentType(vm.transportationPaymentType),\r\n            quotationType: vm.quotationType.paymentType,\r\n            quotationAccountNumber: getAccountFromPaymentType(vm.quotationType),\r\n            splitDutyAndTaxPayment: vm.splitDutyAndTaxPayment,\r\n            dutiesPaymentType: vm.dutiesPaymentType.paymentType,\r\n            dutiesPaymentAccountNumber: getAccountFromPaymentType(vm.dutiesPaymentType, true),\r\n            taxesPaymentType: null,\r\n            taxesPaymentAccountNumber: null\r\n        };\r\n\r\n        if (data.splitDutyAndTaxPayment) {\r\n            data.taxesPaymentType = vm.taxesPaymentType.paymentType;\r\n            data.taxesPaymentAccountNumber = getAccountFromPaymentType(vm.taxesPaymentType, false, true);\r\n        }\r\n\r\n        shipmentService.setPaymentInfo(data);\r\n    }\r\n\r\n    function getAccountFromPaymentType(type, duties = false, taxes = false) {\r\n        let account = '';\r\n        if (type.paymentType === vm.PAYMENT_TYPES.DHL_ACCOUNT) {\r\n            account = type.accountId;\r\n        } else if (type.paymentType === vm.PAYMENT_TYPES.ALTERNATE_DHLACCOUNT) {\r\n            if (duties) {\r\n                type.accountNumber = vm.dutiesAlternateDhlAccount.accountNumber;\r\n            } else if (taxes) {\r\n                type.accountNumber = vm.taxesAlternateDhlAccount.accountNumber;\r\n            } else {\r\n                type.accountNumber = vm.alternateDhlAccount.accountNumber;\r\n            }\r\n            account = type.accountNumber;\r\n        }\r\n        return account;\r\n    }\r\n\r\n    function isTransportationShown() {\r\n        return vm.showOthers || !vm.paymentAccounts.shippers.length;\r\n    }\r\n\r\n    function isDutiesAndTaxesShown() {\r\n        return shipmentService.isPackage();\r\n    }\r\n\r\n    function isPaymentTypeAlternateAccountShown(paymentType) {\r\n        const propName = `${paymentType}PaymentType`;\r\n\r\n        return !!(vm[propName] && vm[propName].paymentType === vm.PAYMENT_TYPES.ALTERNATE_DHLACCOUNT);\r\n    }\r\n\r\n    function getDutiesAndTaxesLabel() {\r\n        return 'shipment.' + (vm.splitDutyAndTaxPayment ?\r\n            'payment_type_duties_title' :\r\n            'payment_type_duties_and_taxes_title');\r\n    }\r\n\r\n    function clearUnusedFieldsContent() {\r\n        if (!vm.splitDutyAndTaxPayment) {\r\n            vm.taxesPaymentType =\r\n                paymentTypeService.getAssociatedOption(vm.paymentAccounts.duties, vm.taxesDefaultOption);\r\n        }\r\n\r\n        if (vm.dutiesPaymentType.paymentType !== vm.PAYMENT_TYPES.ALTERNATE_DHLACCOUNT) {\r\n            vm.dutiesAlternateDhlAccount.accountNumber = '';\r\n        }\r\n\r\n        if (!vm.splitDutyAndTaxPayment || vm.taxesPaymentType.paymentType !== vm.PAYMENT_TYPES.ALTERNATE_DHLACCOUNT) {\r\n            vm.taxesAlternateDhlAccount.accountNumber = '';\r\n        }\r\n    }\r\n\r\n    function clearPaymentsTypeSelection() {\r\n        Object.keys(PAYMENT_DETAILS_FIELDS).forEach((key) => {\r\n            const type = PAYMENT_DETAILS_FIELDS[key];\r\n            if (type !== PAYMENT_DETAILS_FIELDS.INCOTERM) {\r\n                vm[type] = '';\r\n            }\r\n        });\r\n    }\r\n\r\n    function setPaymentValuesToCache() {\r\n        Object.keys(PAYMENT_DETAILS_FIELDS).forEach((key) => {\r\n            const type = PAYMENT_DETAILS_FIELDS[key];\r\n            paymentDetailsCache[type] = vm[type];\r\n        });\r\n    }\r\n\r\n    function isIncotermShown() {\r\n        return shipmentService.isShipmentWithInvoice();\r\n    }\r\n\r\n    function setIncotermToShipmentService() {\r\n        shipmentService.setIncoterm(vm.incoterm.code);\r\n    }\r\n\r\n    function isCreditCardPayment() {\r\n        return vm.transportationPaymentType\r\n            && paymentTypeService.isCreditCardPayment(vm.transportationPaymentType);\r\n    }\r\n\r\n    function loadShipmentData(data) {\r\n        Object.assign(vm, shipmentService.getPaymentTypeModelData(data));\r\n    }\r\n\r\n    function isQuotationTypeShown() {\r\n        return vm.paymentAccounts.shippers && vm.paymentAccounts.shippers.length > 1;\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}