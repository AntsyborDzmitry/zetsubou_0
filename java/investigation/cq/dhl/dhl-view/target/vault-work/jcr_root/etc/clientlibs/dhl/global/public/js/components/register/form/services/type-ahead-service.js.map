{"version":3,"sources":["components/register/form/services/type-ahead-service.js"],"names":[],"mappings":";;;;;;;;;qBAWwB,gBAAgB;;;;;;AAFxC,qBAAI,OAAO,CAAC,kBAAkB,EAAE,gBAAgB,CAAC,CAAC;;AAEnC,aAAS,gBAAgB,GAAG;AACvC,YAAI,CAAC,cAAc,GAAG,OAAO,CAAC;;AAE1B,YAAI,SAAS,GAAG,CACZ,EAAC,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAC,EAC7C,EAAC,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAC,EAChD,EAAC,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAC,EAC/C,EAAC,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAC,EAChD,EAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAC,EAC5C,EAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAC,EAC5C,EAAC,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAC,EAC7C,EAAC,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAC,EAChD,EAAC,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAC,EAC/C,EAAC,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAC,EAChD,EAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAC,EAC5C,EAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAC,EAC5C,EAAC,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAC,EAC7C,EAAC,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAC,EAChD,EAAC,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAC,EAC/C,EAAC,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAC,EAChD,EAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAC,EAC5C,EAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAC,EAC5C,EAAC,IAAI,EAAE,aAAa,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAC,CACpD,CAAC;;AAEN,iBAAS,CAAC,OAAO,CAAC,UAAC,KAAK;mBAAK,KAAK,CAAC,QAAQ,GAAM,KAAK,CAAC,IAAI,UAAK,KAAK,CAAC,IAAI,UAAK,KAAK,CAAC,GAAG,AAAE;SAAA,CAAC,CAAC;;AAE5F,iBAAS,OAAO,GAAG;AACf,mBAAO,SAAS,CAAC;SACpB;KACJ","file":"components/register/form/services/type-ahead-service.js","sourcesContent":["/**\r\n * typeAheadService is for autocomplete of address field in registration form.\r\n * addresses - is for query simulation\r\n * value.fullAddr - is for concatination of all strings of addresses\r\n */\r\n\r\n\r\nimport ewf from 'ewf';\r\n\r\newf.service('typeAheadService', typeAheadService);\r\n\r\nexport default function typeAheadService() {\r\n    this.getAddressList = getAddr;\r\n\r\n        let addresses = [\r\n            {addr: 'amosova', city: 'kiev', zip: '69006'},\r\n            {addr: 'kudrashova', city: 'kiev', zip: '69206'},\r\n            {addr: 'zhilanska', city: 'kiev', zip: '69036'},\r\n            {addr: 'olimpijska', city: 'kiev', zip: '69506'},\r\n            {addr: 'artema', city: 'kiev', zip: '69006'},\r\n            {addr: 'lenina', city: 'kiev', zip: '79006'},\r\n            {addr: 'amosova', city: 'kiev', zip: '69026'},\r\n            {addr: 'kudrashova', city: 'kiev', zip: '69206'},\r\n            {addr: 'zhilanska', city: 'kiev', zip: '69006'},\r\n            {addr: 'olimpijska', city: 'kiev', zip: '69066'},\r\n            {addr: 'artema', city: 'kiev', zip: '69036'},\r\n            {addr: 'lenina', city: 'kiev', zip: '69006'},\r\n            {addr: 'amosova', city: 'kiev', zip: '69006'},\r\n            {addr: 'kudrashova', city: 'kiev', zip: '69006'},\r\n            {addr: 'zhilanska', city: 'kiev', zip: '61006'},\r\n            {addr: 'olimpijska', city: 'kiev', zip: '69006'},\r\n            {addr: 'artema', city: 'kiev', zip: '69006'},\r\n            {addr: 'lenina', city: 'kiev', zip: '69006'},\r\n            {addr: 'feodosijska', city: 'kiev', zip: '69006'}\r\n        ];\r\n\r\n    addresses.forEach((value) => value.fullAddr = `${value.addr}, ${value.city}, ${value.zip}`);\r\n\r\n    function getAddr() {\r\n        return addresses;\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}