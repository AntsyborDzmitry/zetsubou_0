{"version":3,"sources":["components/printer-setting/printer-settings-controller.js"],"names":[],"mappings":"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","file":"components/printer-setting/printer-settings-controller.js","sourcesContent":["\r\nimport './printer-settings-directive';\r\nimport './printer-settings-service';\r\n\r\nPrinterSettingsController.$inject = ['$scope', '$q', '$timeout', 'printerSettingsService'];\r\n\r\nexport default function PrinterSettingsController($scope, $q, $timeout, printerSettingsService) {\r\n    const vm = this;\r\n\r\n    //TODO take these from the server (see available.printer.types setting)\r\n    const printerTypes = [\r\n        {key: 'laser', name: 'Laser Printer'},\r\n        {key: 'LPL', name: 'Thermal LPL printer'},\r\n        {key: 'ZPL', name: 'Thermal ZPL printer'},\r\n        {key: 'inkJet', name: 'Ink Jet Printer'}\r\n    ];\r\n\r\n    //properties\r\n    vm.printerTypes = printerTypes;\r\n    vm.defautPrinterSettings = {\r\n        printerType: '',\r\n        printReceipt: false,\r\n        automaticallyPrint: false\r\n    };\r\n    vm.alertTypes = {\r\n        updated: false\r\n    };\r\n    vm.printerType = vm.defautPrinterSettings.printerType;\r\n    vm.printReceipt = vm.defautPrinterSettings.printReceipt;\r\n    vm.automaticallyPrint = vm.defautPrinterSettings.automaticallyPrint;\r\n\r\n    //methods\r\n    vm.preloadPrinterSettings = preloadPrinterSettings;\r\n    vm.updatePrinterSettings = updatePrinterSettings;\r\n    vm.resetValuesToDefault = resetValuesToDefault;\r\n\r\n    function preloadPrinterSettings() {\r\n        printerSettingsService.getPrinterSettings().then((response) => {\r\n            setDefaultPrinterSettingFromResponse(response);\r\n\r\n            vm.printerType = response.printerType !== null ? getPrinterTypeByKey(response.printerType) : '';\r\n            vm.printReceipt = response.printReceipt;\r\n            vm.automaticallyPrint = response.automaticallyPrint;\r\n        });\r\n    }\r\n\r\n    function updatePrinterSettings() {\r\n        const printerType = vm.printerType ? vm.printerType.key : '';\r\n        const printerObject = createPrinterSettingObject(printerType, vm.printReceipt, vm.automaticallyPrint);\r\n\r\n        const printerSettingsPromise = printerSettingsService.updatePrinterSettings(printerObject);\r\n        printerSettingsPromise\r\n            .then((response) => {\r\n                setDefaultPrinterSettingFromResponse(response);\r\n\r\n                vm.errorMessages = [];\r\n                toggleNotificationAlert('updated');\r\n            });\r\n    }\r\n\r\n    function resetValuesToDefault() {\r\n        vm.printerType = vm.defautPrinterSettings.printerType;\r\n        vm.printReceipt = vm.defautPrinterSettings.printReceipt;\r\n        vm.automaticallyPrint = vm.defautPrinterSettings.automaticallyPrint;\r\n        vm.updated = false;\r\n    }\r\n\r\n    function createPrinterSettingObject(printerType, printReceipt, automaticallyPrint) {\r\n        return {\r\n            printerType,\r\n            printReceipt,\r\n            automaticallyPrint\r\n        };\r\n    }\r\n\r\n    function setDefaultPrinterSettingFromResponse(response) {\r\n        vm.defautPrinterSettings.printerType = response.printerType !== null\r\n            ? getPrinterTypeByKey(response.printerType)\r\n            : '';\r\n        vm.defautPrinterSettings.printReceipt = response.printReceipt;\r\n        vm.defautPrinterSettings.automaticallyPrint = response.automaticallyPrint;\r\n    }\r\n\r\n    function getPrinterTypeByKey(key) {\r\n        return vm.printerTypes.find((printerType) => printerType.key === key);\r\n    }\r\n\r\n    /*TODO change temporary solution for toggle notification alert*/\r\n    function toggleNotificationAlert(action) {\r\n        vm.alertTypes[action] = true;\r\n        $timeout(() => {\r\n            vm.alertTypes[action] = false;\r\n        }, 4000);\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}