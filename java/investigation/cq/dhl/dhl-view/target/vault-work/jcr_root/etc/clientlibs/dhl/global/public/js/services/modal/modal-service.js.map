{"version":3,"sources":["services/modal/modal-service.js"],"names":[],"mappings":";;;qBAQwB,YAAY;;;;;;AAJpC,qBAAI,OAAO,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC;;AAE1C,gBAAY,CAAC,OAAO,GAAG,CAAC,QAAQ,EAAE,YAAY,EAAE,YAAY,CAAC,CAAC;;AAE/C,aAAS,YAAY,CAAC,MAAM,EAAE,UAAU,EAAE;AACrD,YAAI,CAAC,UAAU,GAAG,UAAU,CAAC;AAC7B,YAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;AAC3C,YAAI,CAAC,sBAAsB,GAAG,sBAAsB,CAAC;;;;;;;;;;;;;;AAcrD,iBAAS,UAAU,CAAC,OAAO,EAAE;AACzB,gBAAM,cAAc,GAAG;AACnB,0BAAU,EAAE,IAAI;aACnB,CAAC;;iCAUE,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,cAAc,EAAE,OAAO,CAAC;;gBAP1C,UAAU,kBAAV,UAAU;gBACV,UAAU,kBAAV,UAAU;gBACV,YAAY,kBAAZ,YAAY;gBACZ,KAAK,kBAAL,KAAK;gBACL,QAAQ,kBAAR,QAAQ;gBACR,WAAW,kBAAX,WAAW;gBACX,WAAW,kBAAX,WAAW;;AAGf,mBAAO,MAAM,CAAC,IAAI,CAAC;AACf,wBAAQ,EAAE,IAAI;AACd,6BAAa,EAAE,cAAc;AAC7B,2BAAW,2BAAyB,WAAW,AAAE;AACjD,2BAAW,EAAE,eAAe;AAC5B,wBAAQ,EAAE,UAAU;AACpB,0BAAU,EAAV,UAAU;AACV,4BAAY,EAAZ,YAAY;AACZ,qBAAK,EAAL,KAAK;AACL,wBAAQ,EAAR,QAAQ;AACR,2BAAW,EAAX,WAAW;aACd,CAAC,CAAC;SACN;;;;;;;;;;;;AAYD,iBAAS,iBAAiB,CAAC,OAAO,EAAE;AAChC,gBAAI,CAAC,OAAO,CAAC,aAAa,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE;AACrD,uBAAO,CAAC,gBAAgB,GAAG,8BAA8B,CAAC;aAC7D;;AAED,gBAAM,KAAK,GAAG,UAAU,CAAC,IAAI,EAAE,CAAC;AAChC,kBAAM,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;;AAE9B,mBAAO,IAAI,CAAC,UAAU,CAAC;AACnB,0BAAU,EAAE,IAAI;AAChB,qBAAK,EAAL,KAAK;AACL,wBAAQ,EAAC,wZAAwZ;aACpa,CAAC,CAAC,MAAM,CAAC;SACb;;;;;;;;;;;;;;;AAeD,iBAAS,sBAAsB,CAAC,OAAO,EAAE;AACrC,gBAAI,CAAC,OAAO,CAAC,aAAa,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE;AACrD,uBAAO,CAAC,gBAAgB,GAAG,8BAA8B,CAAC;aAC7D;AACD,gBAAI,CAAC,OAAO,CAAC,iBAAiB,IAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE;AAC7D,uBAAO,CAAC,oBAAoB,GAAG,kCAAkC,CAAC;aACrE;;AAED,gBAAM,KAAK,GAAG,UAAU,CAAC,IAAI,EAAE,CAAC;AAChC,kBAAM,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;;AAE9B,mBAAO,IAAI,CAAC,UAAU,CAAC;AACnB,0BAAU,EAAE,IAAI;AAChB,qBAAK,EAAL,KAAK;AACL,wBAAQ,EAAC,imBAAimB;aAC7mB,CAAC,CAAC,MAAM,CAAC;SACb;KACJ","file":"services/modal/modal-service.js","sourcesContent":["import ewf from 'ewf';\r\nimport './../../directives/ewf-modal/ewf-modal-directive';\r\nimport './../nls-service';\r\n\r\newf.service('modalService', modalService);\r\n\r\nmodalService.$inject = ['$modal', '$rootScope', 'nlsService'];\r\n\r\nexport default function modalService($modal, $rootScope) {\r\n    this.showDialog = showDialog;\r\n    this.showMessageDialog = showMessageDialog;\r\n    this.showConfirmationDialog = showConfirmationDialog;\r\n\r\n    /**\r\n    * @param {Object} options - confirmation dialog options\r\n    * @param {String} options.closeOnEsc - close dialog on esc key press, enabled by default\r\n    * @param {String} options.controller - dialog controller\r\n    * @param {String} options.controllerAs - dialog scope property for controller\r\n    * @param {String} options.scope - dialog scope\r\n    * @param {String} options.template - dialog template\r\n    * @param {String} options.templateUrl - dialog templateUrl\r\n    * @param {String} options.cancelButtonLabel - dialog cancel button label, defaults to 'Ok'\r\n    * @param {String} options.cancelButtonNlsLabel - dialog cancel button label nls full key, defaults to 'Cancel'\r\n    * @returns {Object} dialogInstance - promise, which close(), dismiss() methods and result promise\r\n    */\r\n    function showDialog(options) {\r\n        const defaultOptions = {\r\n            closeOnEsc: true\r\n        };\r\n\r\n        const {\r\n            closeOnEsc,\r\n            controller,\r\n            controllerAs,\r\n            scope,\r\n            template,\r\n            templateUrl,\r\n            windowClass\r\n        } = Object.assign({}, defaultOptions, options);\r\n\r\n        return $modal.open({\r\n            backdrop: true,\r\n            backdropClass: 'ewf-modal-bg',\r\n            windowClass: `is-visible template ${windowClass}`,\r\n            openedClass: 'modal-is-open',\r\n            keyboard: closeOnEsc,\r\n            controller,\r\n            controllerAs,\r\n            scope,\r\n            template,\r\n            templateUrl\r\n        });\r\n    }\r\n\r\n    /**\r\n    * @param {Object} options - confirmation dialog options\r\n    * @param {String} options.title - dialog title\r\n    * @param {String} options.nlsTitle - dialog title nls full key\r\n    * @param {String} options.message - dialog message\r\n    * @param {String} options.nlsMessage - dialog message nls full key\r\n    * @param {String} options.okButtonLabel - dialog OK button label\r\n    * @param {String} options.okButtonNlsLabel - dialog OK button label nls full key\r\n    * @returns {Object} result - promise, which will be resolved on OK button click and rejected on close button click\r\n    */\r\n    function showMessageDialog(options) {\r\n        if (!options.okButtonLabel && !options.okButtonNlsLabel) {\r\n            options.okButtonNlsLabel = 'common.modal_ok_button_label';\r\n        }\r\n\r\n        const scope = $rootScope.$new();\r\n        Object.assign(scope, options);\r\n\r\n        return this.showDialog({\r\n            closeOnEsc: true,\r\n            scope,\r\n            template:'<div ewf-modal title={{title}} nls-title={{nlsTitle}}><div class=ewf-modal__body><p ng-if=nlsMessage nls={{nlsMessage}}></p><p ng-if=message ng-bind=message></p></div><div class=ewf-modal__footer><button class=\\\"btn btn_primary-action\\\" ng-click=ewfModalCtrl.close();><span ng-if=okButtonLabel ng-bind=okButtonLabel></span> <span ng-if=okButtonNlsLabel nls={{okButtonNlsLabel}}></span></button></div></div>'\r\n        }).result;\r\n    }\r\n\r\n    /**\r\n    * @param {Object} options - confirmation dialog options\r\n    * @param {String} options.title - dialog title\r\n    * @param {String} options.nlsTitle - dialog title nls full key\r\n    * @param {String} options.message - dialog message\r\n    * @param {String} options.nlsMessage - dialog message nls full key\r\n    * @param {String} options.okButtonLabel - dialog OK button label\r\n    * @param {String} options.okButtonNlsLabel - dialog OK button label nls full key\r\n    * @param {String} options.cancelButtonLabel - dialog cancel button label, defaults to 'Ok'\r\n    * @param {String} options.cancelButtonNlsLabel - dialog cancel button label nls full key, defaults to 'Cancel'\r\n    * @returns {Object} result - promise, which will be resolved on OK button click and rejected on cancel\r\n     * or close button click\r\n    */\r\n    function showConfirmationDialog(options) {\r\n        if (!options.okButtonLabel && !options.okButtonNlsLabel) {\r\n            options.okButtonNlsLabel = 'common.modal_ok_button_label';\r\n        }\r\n        if (!options.cancelButtonLabel && !options.cancelButtonNlsLabel) {\r\n            options.cancelButtonNlsLabel = 'common.modal_cancel_button_label';\r\n        }\r\n\r\n        const scope = $rootScope.$new();\r\n        Object.assign(scope, options);\r\n\r\n        return this.showDialog({\r\n            closeOnEsc: true,\r\n            scope,\r\n            template:'<div ewf-modal title={{title}} nls-title={{nlsTitle}}><div class=ewf-modal__body><p ng-if=nlsMessage nls={{nlsMessage}}></p><p ng-if=message ng-bind=message></p></div><div class=ewf-modal__footer><button class=\\\"btn btn_action\\\" ng-click=ewfModalCtrl.close();><span ng-if=okButtonLabel ng-bind=okButtonLabel></span> <span ng-if=okButtonNlsLabel nls={{okButtonNlsLabel}}></span></button> <button class=\\\"btn btn_action\\\" ng-click=ewfModalCtrl.dismiss();><span ng-if=cancelButtonLabel ng-bind=cancelButtonLabel></span> <span ng-if=cancelButtonNlsLabel nls={{cancelButtonNlsLabel}}></span></button></div></div>'\r\n        }).result;\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}