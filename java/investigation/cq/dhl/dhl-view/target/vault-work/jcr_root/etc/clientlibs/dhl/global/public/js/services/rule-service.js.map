{"version":3,"sources":["services/rule-service.js"],"names":[],"mappings":"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","file":"services/rule-service.js","sourcesContent":["/*global setTimeout*/\r\nimport ewf from 'ewf';\r\n\r\newf.service('ruleService', ruleService);\r\n\r\nruleService.$inject = ['$http', '$q', 'logService', 'navigationService', 'countryCodeConverter'];\r\n\r\n/**\r\n * Applies rules to form\r\n *\r\n * @param {angular.$http} $http - angular $http object\r\n * @param {Object} $q - angular promises\r\n * @param {logService} logService - logging service\r\n * @param {navigationService} navigationService\r\n */\r\nexport default function ruleService($http, $q, logService, navigationService, countryCodeConverter) {\r\n    const publicAPI = {\r\n        acquireRulesForFormFields,\r\n        getFieldRules,\r\n        getFormRules,\r\n        acquireSetting\r\n    };\r\n\r\n    /**\r\n     * {\r\n     *      formKey: {formDefinition}\r\n     * }\r\n     */\r\n    const FORM_DEFINITIONS = {};\r\n    const LOAD_FAILED = {};\r\n\r\n    /**\r\n     * {\r\n     *      formKey: {\r\n     *          inProgress: false,\r\n     *          deferred: [defer objects]\r\n     *      }\r\n     * }\r\n     */\r\n    const pendingRequests = {};\r\n\r\n    /**\r\n     * @type {Number}\r\n     */\r\n    let timeoutId;\r\n\r\n    /**\r\n     * @param {String} formName\r\n     * @returns {promise}\r\n     */\r\n    function acquireRulesForFormFields(formName, optionalCountryId) {\r\n        const countryId = optionalCountryId || getCurrentCountryId();\r\n        const formKey = getFormCacheKey(formName, countryId);\r\n        const formDefinition = FORM_DEFINITIONS[formKey];\r\n        const deferred = $q.defer();\r\n\r\n        if (formDefinition !== undefined) {\r\n            if (formDefinition === LOAD_FAILED) {\r\n                deferred.reject('form \"' + formKey + '\" failed to load in previous time');\r\n            } else {\r\n                deferred.resolve(formDefinition);\r\n            }\r\n        } else {\r\n            let pendingReq = pendingRequests[formKey];\r\n            if (!pendingReq) {\r\n                pendingReq = pendingRequests[formKey] = {\r\n                    inProgress: false,\r\n                    deferred: []\r\n                };\r\n                if (!timeoutId) {\r\n                    timeoutId = setTimeout(() => {\r\n                        timeoutId = undefined;\r\n                        debounceAjaxCall(countryId);\r\n                    }, 0);\r\n                }\r\n            }\r\n            pendingReq.deferred.push(deferred);\r\n        }\r\n\r\n        return deferred.promise;\r\n    }\r\n\r\n    function debounceAjaxCall(countryId) {\r\n        // form names requested by this call\r\n        const formKeys = [];\r\n        Object.keys(pendingRequests).forEach((formKey) => {\r\n            const pendingReq = pendingRequests[formKey];\r\n            if (!pendingReq.inProgress) {\r\n                formKeys.push(formKey);\r\n                pendingReq.inProgress = true;\r\n            }\r\n        });\r\n\r\n        $http.get('/api/form/several_form_definitions/' + countryId, {params: {formId: formKeys.map(getFormName)}})\r\n            .then((response) => {\r\n                // TODO: check incoming data\r\n                const rules = response.data;\r\n\r\n                // TODO: move in separate function\r\n                Object.keys(rules).forEach((formName) => {\r\n                    const formKey = getFormCacheKey(formName, countryId);\r\n                    if (!formKeys.includes(formKey)) {\r\n                        logService.warn('There are rules for form: \"' + formKey + '\", but they were not requested!');\r\n                        return;\r\n                    }\r\n\r\n                    const formRules = {};\r\n                    rules[formName].forEach((fieldDefinition) => {\r\n                        const fieldName = fieldDefinition.field;\r\n                        formRules[fieldName] = fieldDefinition;\r\n                    });\r\n\r\n                    pendingRequests[formKey].deferred.forEach((defer) => defer.resolve(formRules));\r\n                    delete pendingRequests[formKey];\r\n                    FORM_DEFINITIONS[formKey] = formRules;\r\n                });\r\n\r\n                rejectRemainingPromises(undefined);\r\n            })\r\n            .catch((response) => {\r\n                const data = response.data;\r\n                logService.error('error while requesting form definition: ' + data);\r\n\r\n                rejectRemainingPromises(data);\r\n            });\r\n\r\n        function rejectRemainingPromises(rejectData) {\r\n            formKeys.forEach((formKey) => {\r\n                const pendingReq = pendingRequests[formKey];\r\n                if (pendingReq) {\r\n                    pendingReq.deferred.forEach((defer) => defer.reject(rejectData));\r\n                    delete pendingRequests[formKey];\r\n                    FORM_DEFINITIONS[formKey] = LOAD_FAILED;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    function acquireSetting(settingFullPath, defaultCountryCode = 'url') {\r\n        const groupNameLastIndex = settingFullPath.indexOf('.');\r\n        const groupName = settingFullPath.substr(0, groupNameLastIndex);\r\n        const fieldName = settingFullPath.substr(groupNameLastIndex + 1);\r\n        const countryCode = defaultCountryCode === 'url' ? getCurrentCountryId() : defaultCountryCode;\r\n\r\n        const deferred = $q.defer();\r\n        $http.get(`/api/rules/${groupName}/${countryCode}`)\r\n            .then((response) => {\r\n                const setting = response.data[groupName].find((eachSetting) => eachSetting.field === fieldName);\r\n                if (setting) {\r\n                    deferred.resolve(setting.value);\r\n                } else {\r\n                    const errorString = `form ${groupName} loaded successfully, but no field ${fieldName}`;\r\n                    deferred.reject(errorString);\r\n                    logService.log(errorString);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                deferred.reject(error);\r\n                logService.log(error);\r\n            });\r\n        return deferred.promise;\r\n    }\r\n\r\n    function getFieldRules(fieldId, optionalCountryId) {\r\n        const [formName, fieldName] = fieldId.split('.');\r\n        const formKey = getFormCacheKey(formName, optionalCountryId || getCurrentCountryId());\r\n\r\n        //TODO: what we suppose to do if there are no form definitions\r\n        if (FORM_DEFINITIONS[formKey]) {\r\n            return FORM_DEFINITIONS[formKey][fieldName];\r\n        }\r\n\r\n        return {};\r\n    }\r\n\r\n    function getFormRules(formKey) {\r\n        return FORM_DEFINITIONS[formKey];\r\n    }\r\n\r\n    function getFormCacheKey(formName, countryId) {\r\n        return `${formName}.${countryId}`;\r\n    }\r\n\r\n    function getFormName(formKey) {\r\n        return formKey.split('.')[0];\r\n    }\r\n\r\n    function getCurrentCountryId() {\r\n        return countryCodeConverter.fromThreeLetterToCatalystFormat(navigationService.getCountryLang().countryId);\r\n    }\r\n\r\n    return publicAPI;\r\n}\r\n"],"sourceRoot":"/source/"}