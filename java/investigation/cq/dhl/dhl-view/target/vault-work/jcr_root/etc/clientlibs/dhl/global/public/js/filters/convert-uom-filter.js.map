{"version":3,"sources":["filters/convert-uom-filter.js"],"names":[],"mappings":";;;qBAIwB,oBAAoB;;;;;;AAF5C,qBAAI,MAAM,CAAC,sBAAsB,EAAE,oBAAoB,CAAC,CAAC;;AAE1C,aAAS,oBAAoB,GAAG;AAC3C,YAAM,uBAAuB,GAAG,CAAC,CAAC;;AAElC,eAAO,UAAS,KAAK,EAAE,cAAc,EAA8C;gBAA5C,gBAAgB,yDAAG,uBAAuB;;AAC7E,gBAAI,cAAc,GAAG,CAAC,CAAC;AACvB,gBAAM,cAAc,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;;AAEzC,gBAAI,cAAc,EAAE;AAChB,8BAAc,GAAG,cAAc,IAAI,CAAC,cAAc,IAAI,CAAC,CAAA,AAAC,CAAC;aAC5D;AACD,mBAAO,CAAC,cAAc,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;SACpD,CAAC;KACL","file":"filters/convert-uom-filter.js","sourcesContent":["import ewf from 'ewf';\r\n\r\newf.filter('convertUomToOpposite', convertUomToOpposite);\r\n\r\nexport default function convertUomToOpposite() {\r\n    const defaultConvertPrecision = 2;\r\n\r\n    return function(value, uomCoefficient, convertPrecision = defaultConvertPrecision) {\r\n        let convertedValue = 0;\r\n        const valueToConvert = parseFloat(value);\r\n\r\n        if (valueToConvert) {\r\n            convertedValue = valueToConvert * (+uomCoefficient || 1);\r\n        }\r\n        return +convertedValue.toFixed(convertPrecision);\r\n    };\r\n}\r\n"],"sourceRoot":"/source/"}