{"version":3,"sources":["components/reset-password/reset-password-controller.js"],"names":[],"mappings":"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","file":"components/reset-password/reset-password-controller.js","sourcesContent":["import './../../services/modal/modal-service';\r\n\r\nResetPasswordController.$inject = ['$window',\r\n                                   '$scope',\r\n                                   'modalService',\r\n                                   'logService',\r\n                                   'nlsService',\r\n                                   'navigationService',\r\n                                   'passwordService',\r\n                                   'loginService',\r\n                                   'userService'];\r\n\r\nexport default function ResetPasswordController($window,\r\n                                                $scope,\r\n                                                modalService,\r\n                                                logService,\r\n                                                nlsService,\r\n                                                navigationService,\r\n                                                passwordService,\r\n                                                loginService,\r\n                                                userService) {\r\n\r\n    const vm = this;\r\n\r\n    Object.assign(vm, {\r\n        init,\r\n        resetPassword,\r\n        createPassword,\r\n        changePassword,\r\n        resendPasswordResetEmail,\r\n        resendPasswordCreateEmail,\r\n        redirectToLogin,\r\n        validateResetForm,\r\n\r\n        password: '',\r\n        errors: [],\r\n        token: navigationService.getParamFromUrl('token'),\r\n        tokenValidation: false,\r\n        tokenExpired: false\r\n    });\r\n\r\n    //TODO: fix gulp-jscpd bug with duplicate lines and extract function\r\n    vm.isTokenValidAndNotExpired = () => {\r\n        return !vm.tokenExpired && vm.tokenValidation;\r\n    };\r\n\r\n    const RESET_PASSWORD_SCENARIO = {\r\n        RESET: 'reset',\r\n        CREATE: 'create',\r\n        CHANGE: 'change'\r\n    };\r\n\r\n    const LINK_EXPIRED = 'errors.link_expired';\r\n    const LINK_INVALID = 'errors.link_invalid';\r\n\r\n    let scenario = navigationService.getParamFromUrl('scenario');\r\n    scenario = scenario ? scenario : RESET_PASSWORD_SCENARIO.RESET;\r\n\r\n    vm.scenario = RESET_PASSWORD_SCENARIO[scenario.toUpperCase()] ? scenario : RESET_PASSWORD_SCENARIO.RESET;\r\n\r\n    vm.init();\r\n\r\n    function init() {\r\n        switch (vm.scenario) {\r\n            case RESET_PASSWORD_SCENARIO.RESET:\r\n                processResetPassword();\r\n                break;\r\n            case RESET_PASSWORD_SCENARIO.CREATE:\r\n                processCreatePassword();\r\n                break;\r\n            case RESET_PASSWORD_SCENARIO.CHANGE:\r\n                processChangePassword();\r\n                break;\r\n        }\r\n    }\r\n\r\n    function processResetPassword() {\r\n        passwordService.validateResetToken(vm.token)\r\n            .then(() => {\r\n                vm.tokenValidation = true;\r\n            })\r\n            .catch(processTokenError);\r\n    }\r\n\r\n    function processCreatePassword() {\r\n        nlsService.getTranslation('resetpassword.create_password_action')\r\n            .then((text) => {\r\n                $window.document.title = text;\r\n            });\r\n        passwordService.validateCreateToken(vm.token)\r\n            .then(() => {\r\n                vm.tokenValidation = true;\r\n            })\r\n            .catch(processTokenError);\r\n    }\r\n\r\n    function processChangePassword() {\r\n        nlsService.getTranslation('resetpassword.change_password_action')\r\n            .then((text) => {\r\n                $window.document.title = text;\r\n            });\r\n        vm.tokenValidation = true;\r\n        const expiredPassword = userService.getPassword();\r\n        const username = userService.getUsername();\r\n        userService.clearStoredCredentials();\r\n        if (!expiredPassword) {\r\n            logService.log('Expired password not found. Redirecting to login...');\r\n            redirectToLogin();\r\n        }\r\n        vm.expiredPassword = expiredPassword;\r\n        vm.username = username;\r\n    }\r\n\r\n    function validateResetForm(resetForm) {\r\n        return $scope.ewfFormCtrl.ewfValidation() && resetForm.$valid;\r\n    }\r\n\r\n    function resetPassword() {\r\n        vm.submitted = true;\r\n\r\n        passwordService.resetPassword(vm.token, vm.password)\r\n            .then(() => {\r\n                showSuccessDialog({\r\n                    nlsTitle: 'resetpassword.reset_password_success_title',\r\n                    nlsMessage: 'resetpassword.reset_password_success_message',\r\n                    okButtonNlsLabel: 'resetpassword.confirm'\r\n                });\r\n            })\r\n            .catch(onServiceError);\r\n    }\r\n\r\n    function createPassword() {\r\n        vm.submitted = true;\r\n\r\n        passwordService.createPassword(vm.token, vm.password)\r\n            .then(() => {\r\n                showSuccessDialog({\r\n                    nlsTitle: 'resetpassword.create_password_success_title',\r\n                    nlsMessage: 'resetpassword.create_password_success_message',\r\n                    okButtonNlsLabel: 'resetpassword.confirm'\r\n                });\r\n            })\r\n            .catch(onServiceError);\r\n    }\r\n\r\n    function changePassword() {\r\n        vm.submitted = true;\r\n\r\n        passwordService.changeExpiredPassword(vm.username, vm.expiredPassword, vm.password)\r\n            .then(() => {\r\n                showSuccessDialog({\r\n                    nlsTitle: 'resetpassword.change_password_success_title',\r\n                    nlsMessage: 'resetpassword.change_password_success_message',\r\n                    okButtonNlsLabel: 'resetpassword.confirm'\r\n                });\r\n            })\r\n            .catch(onServiceError);\r\n    }\r\n\r\n    function resendPasswordResetEmail() {\r\n        passwordService.resendPasswordResetEmail(vm.token)\r\n            .then(redirectToLogin)\r\n            .catch(onServiceError);\r\n    }\r\n\r\n    function resendPasswordCreateEmail() {\r\n        passwordService.resendPasswordCreateEmail(vm.token)\r\n            .then(redirectToLogin)\r\n            .catch(onServiceError);\r\n    }\r\n\r\n    function processTokenError(err) {\r\n        logService.log(err);\r\n        const error = err.data.errors[0];\r\n        if (error === LINK_INVALID) {\r\n            if (vm.scenario === RESET_PASSWORD_SCENARIO.CREATE) {\r\n                loginService.saveNextFormTitle('resetpassword.create_password_already_used');\r\n                navigationService.redirectToLogin();\r\n            }\r\n            if (vm.scenario === RESET_PASSWORD_SCENARIO.RESET) {\r\n                loginService.saveNextFormTitle('resetpassword.reset_password_already_used');\r\n                navigationService.redirectToLogin();\r\n            }\r\n        }\r\n        if (err.status === 400) {\r\n            if (error === LINK_EXPIRED) {\r\n                vm.tokenExpired = true;\r\n            } else {\r\n                vm.errors.push(LINK_INVALID);\r\n            }\r\n        }\r\n    }\r\n\r\n    function showSuccessDialog(dialogOptions) {\r\n        modalService.showMessageDialog(dialogOptions)\r\n            .finally(redirectToLogin);\r\n    }\r\n\r\n    function onServiceError(err) {\r\n        logService.log(err);\r\n        if (err.data) {\r\n            vm.errors = err.data.errors ? err.data.errors : (err.data.fieldErrors && err.data.fieldErrors.newPassword);\r\n        }\r\n    }\r\n\r\n    function redirectToLogin() {\r\n        navigationService.redirectToLogin();\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}