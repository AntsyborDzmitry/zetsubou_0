{"version":3,"sources":["components/register/registration-service.js"],"names":[],"mappings":";;;qBAMwB,mBAAmB;;;;;;AAJ3C,qBAAI,OAAO,CAAC,qBAAqB,EAAE,mBAAmB,CAAC,CAAC;;AAExD,uBAAmB,CAAC,MAAM,GAAG,CAAC,OAAO,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC;;AAE5C,aAAS,mBAAmB,CAAC,KAAK,EAAE,EAAE,EAAE,UAAU,EAAE;AAC/D,YAAM,SAAS,GAAG;AACd,uBAAW,EAAX,WAAW;AACX,2BAAe,EAAf,eAAe;AACf,sCAA0B,EAA1B,0BAA0B;SAC7B,CAAC;;;AAGF,iBAAS,WAAW,CAAC,YAAY,EAAE;AAC/B,mBAAO,KAAK,CAAC,GAAG,yBAAuB,YAAY,CAAG,CACjD,IAAI,CAAC,UAAC,IAAI,EAAK;;AAEZ,0BAAU,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;AAC1C,uBAAO,IAAI,CAAC;aACf,CAAC,SACI,CAAC,UAAC,KAAK,EAAK;;AAEd,0BAAU,CAAC,GAAG,CAAC,8BAA8B,GAAG,KAAK,CAAC,CAAC;AACvD,uBAAO,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;aAC3B,CAAC,CAAC;SACV;;AAED,iBAAS,eAAe,CAAC,OAAO,EAAE;AAC9B,gBAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;AACxC,gBAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC;;AAE3B,mBAAO,KAAK,CAAC,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,CACtC,IAAI,CAAC,UAAC,QAAQ,EAAK;;AAEhB,0BAAU,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;AACnD,uBAAO,QAAQ,CAAC,IAAI,CAAC;aACxB,CAAC,SACI,CAAC,UAAC,QAAQ,EAAK;;AAEjB,0BAAU,CAAC,GAAG,CAAC,mCAAmC,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;AACpE,uBAAO,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;aACnC,CAAC,CAAC;SACV;;AAED,iBAAS,0BAA0B,CAAC,WAAW,EAAE;AAC7C,mBAAO,KAAK,CAAC,GAAG,6CAA2C,WAAW,CAAG,CACpE,IAAI,CAAC,UAAC,QAAQ;uBAAK,QAAQ,CAAC,IAAI;aAAA,CAAC,SAC5B,CAAC,UAAC,QAAQ;uBAAK,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC;aAAA,CAAC,CAAC;SACjD;;AAED,eAAO,SAAS,CAAC;KACpB","file":"components/register/registration-service.js","sourcesContent":["import ewf from 'ewf';\r\n\r\newf.service('registrationService', RegistrationService);\r\n\r\nRegistrationService.inject = ['$http', '$q', 'logService'];\r\n\r\nexport default function RegistrationService($http, $q, logService) {\r\n    const publicAPI = {\r\n        verifyEmail,\r\n        registerNewUser,\r\n        renewExpiredActivationLink\r\n    };\r\n\r\n    //temporary method to work around true e-mail activation\r\n    function verifyEmail(activationId) {\r\n        return $http.get(`/api/user/activate/${activationId}`)\r\n            .then((data) => {\r\n                // TODO: check data\r\n                logService.log('email verification done');\r\n                return data;\r\n            })\r\n            .catch((error) => {\r\n                // TODO: handle error codes from services differently\r\n                logService.log('e-mail verification failed: ' + error);\r\n                return $q.reject(error);\r\n            });\r\n    }\r\n\r\n    function registerNewUser(newUser) {\r\n        const user = Object.assign({}, newUser);\r\n        user.userName = user.email;\r\n\r\n        return $http.post('/api/user/signup', user)\r\n            .then((response) => {\r\n                // TODO: check that 'data' is valid\r\n                logService.log('new user registered successfully');\r\n                return response.data;\r\n            })\r\n            .catch((response) => {\r\n                // TODO: handle error codes from services different\r\n                logService.log('New user\\'s registration failed! ' + response.data);\r\n                return $q.reject(response.data);\r\n            });\r\n    }\r\n\r\n    function renewExpiredActivationLink(expiredLink) {\r\n        return $http.get(`/api/user/activationEmail/renewExpired/${expiredLink}`)\r\n            .then((response) => response.data)\r\n            .catch((response) => $q.reject(response));\r\n    }\r\n\r\n    return publicAPI;\r\n}\r\n"],"sourceRoot":"/source/"}