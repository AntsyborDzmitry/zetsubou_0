{"version":3,"sources":["directives/ewf-address/ewf-address-service.js"],"names":[],"mappings":"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","file":"directives/ewf-address/ewf-address-service.js","sourcesContent":["import ewf from 'ewf';\r\n\r\newf.service('ewfAddressService', EwfAddressService);\r\n\r\nEwfAddressService.$inject = ['$http', '$q', 'logService'];\r\n\r\nexport default function EwfAddressService($http, $q, logService) {\r\n    function onError(reason) {\r\n        logService.error(reason);\r\n        return $q.reject(reason);\r\n    }\r\n\r\n    function uniqueFilterByKey(array, key) {\r\n        return array.filter((item, id) => id === array.findIndex((el) => item[key] === el[key]));\r\n    }\r\n\r\n    function getAddresses(countryCode, query) {\r\n        const regex = new RegExp(query, 'i');\r\n\r\n        return $http.get(`/api/admr/address/${countryCode}/${query}`)\r\n            .then((response) => {\r\n                if (response.data.length === 0) {\r\n                    return [];\r\n                }\r\n\r\n                const responseList = response.data\r\n                    .filter((item) => regex.test(item.street)\r\n                        || regex.test(item.city)\r\n                        || regex.test(item.district))\r\n                    .map((item) => ({\r\n                        name: item.street,\r\n                        fullAddress: `${item.street}, ${item.city}, ${item.district}`,\r\n                        group: 'Search Addresses',\r\n                        data: item\r\n                    }));\r\n\r\n                if (responseList.length) {\r\n                    responseList[0].firstInGroup = true;\r\n                }\r\n\r\n                return responseList;\r\n            })\r\n            .catch(onError);\r\n    }\r\n\r\n    function addressSearchByZipCode(countryCode, zipCode) {\r\n        return $http.get(`/api/addressbook/search?countryCode=${countryCode}&zipCode=${zipCode}`)\r\n            .then((response) => uniqueFilterByKey(response.data, 'postalCode'))\r\n            .catch(onError);\r\n    }\r\n\r\n    function addressSearchByCity(countryCode, city) {\r\n        return $http.get(`/api/addressbook/search?countryCode=${countryCode}&city=${city}`)\r\n            .then((response) => uniqueFilterByKey(response.data, 'city'))\r\n            .catch(onError);\r\n    }\r\n\r\n    function getShipmentAddressDefaults() {\r\n        return $http.get('/api/myprofile/shipment/defaults/address')\r\n            .then((response) => response.data)\r\n            .catch(onError);\r\n    }\r\n\r\n    return {\r\n        getAddresses,\r\n        addressSearchByZipCode,\r\n        addressSearchByCity,\r\n        getShipmentAddressDefaults\r\n    };\r\n}\r\n"],"sourceRoot":"/source/"}