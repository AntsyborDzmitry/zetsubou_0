{"version":3,"sources":["components/shipment/address-details/address-details-controller.js"],"names":[],"mappings":"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","file":"components/shipment/address-details/address-details-controller.js","sourcesContent":["import angular from 'angular';\r\nimport '../../../services/ewf-crud-service';\r\nimport '../../../services/user-service';\r\nimport '../../../services/modal/modal-service';\r\nimport '../../../services/location-service';\r\nimport './../../shipment/ewf-shipment-service';\r\nimport './address-details-service';\r\nimport './../../profile-shipment-defaults/services/profile-shipment-service';\r\nimport './../../../services/navigation-service';\r\nimport EwfShipmentStepBaseController from './../../shipment/ewf-shipment-step-base-controller';\r\n\r\nAddressDetailsController.$inject = ['$q',\r\n    '$scope',\r\n    'locationService',\r\n    'navigationService',\r\n    'modalService',\r\n    'nlsService',\r\n    'userService',\r\n    'ewfCrudService',\r\n    'shipmentService',\r\n    'addressDetailsService',\r\n    'profileShipmentService'];\r\n\r\nAddressDetailsController.prototype = new EwfShipmentStepBaseController('address-details');\r\n\r\n//TODO move functionality for get saving printers to shipment service, to avoid cross module dependencies\r\nexport default function AddressDetailsController($q,\r\n                                                 $scope,\r\n                                                 locationService,\r\n                                                 navigationService,\r\n                                                 modalService,\r\n                                                 nlsService,\r\n                                                 userService,\r\n                                                 ewfCrudService,\r\n                                                 shipmentService,\r\n                                                 addressDetailsService,\r\n                                                 profileShipmentService) {\r\n    const vm = this;\r\n\r\n    Object.assign(vm, {\r\n        onInit,\r\n        onNextClick,\r\n        onEditClick,\r\n        clearAddressFrom,\r\n        clearAddressTo,\r\n        normalizeAddress,\r\n        swapAddresses,\r\n        checkImportAccountNumber,\r\n        showSaveContactDialog,\r\n        updateContact,\r\n        addressBookSelected,\r\n        getCurrentIncompleteData,\r\n        typeaheadSelected,\r\n        redirectToHelpCenterPage,\r\n        loadShipmentData,\r\n\r\n        FROM: 'from',\r\n        safingShipment: false,\r\n        TO: 'to',\r\n        isAuthorized: false,\r\n        saveFromConfirmed: false,\r\n        saveToConfirmed: false,\r\n        updateFromConfirmed: false,\r\n        updateToConfirmed: false,\r\n\r\n        fromContactFields: {},\r\n        toContactFields: {},\r\n\r\n        fromShowCreateButton: false,\r\n        fromShowUpdateButton: false,\r\n        toShowCreateButton: false,\r\n        toShowUpdateButton: false\r\n    });\r\n\r\n    let modalWindow;\r\n\r\n    const notifications = {\r\n        emailNotifications: [{\r\n            email: 'userSuccess@test.com',\r\n            destination: 'userSuccess@test.com',\r\n            language: 'en',\r\n            phoneCountryCode: '',\r\n            notificationEvents: {\r\n                pickedUpByCourier: false,\r\n                clearedCustoms: false,\r\n                deliveryDelay: false,\r\n                customsDelay: false,\r\n                delivered: false\r\n            },\r\n            type: 'EMAIL'\r\n        }],\r\n        smsNotifications: []\r\n    };\r\n\r\n    const immutableProperties = [\r\n        'contactDetails',\r\n        'phoneDetails',\r\n        'countries',\r\n        'key',\r\n        'mailingListSetting',\r\n        'notificationSettings',\r\n        'paymentSetting',\r\n        'pickupSetting',\r\n        'shareSetting',\r\n        'shippingSetting'\r\n    ];\r\n\r\n    const countries = [\r\n        {value: 'US', name: 'USA'},\r\n        {value: 'UA', name: 'Ukraine'},\r\n        {value: 'PL', name: 'Poland'},\r\n        {value: 'DE', name: 'Germany'}\r\n    ];\r\n\r\n    const availableLocationsPromise = locationService.loadAvailableLocations();\r\n    const RESIDENTAL_ADDRESS_TYPE = 'RESIDENTIAL';\r\n\r\n    clearAddressFrom();\r\n    clearAddressTo();\r\n\r\n    function onInit() {\r\n        userService.whoAmI()\r\n            .then((response) => {\r\n                if (response.groups[0] !== 'guest') {\r\n                    vm.isAuthorized = true;\r\n                }\r\n            });\r\n\r\n        $scope.$watch(() => vm.fromContactFields, (newVal) => {\r\n            let empty = true;\r\n            Object.keys(newVal).forEach((key) => {\r\n                const fromProperty = newVal[key];\r\n                const fromPropertyNotBlank = (fromProperty !== '') && (typeof fromProperty !== 'undefined');\r\n                if (fromPropertyNotBlank && (!immutableProperties.includes(key))) {\r\n                    empty = false;\r\n                }\r\n            });\r\n            vm.fromShowCreateButton = !empty;\r\n            vm.fromShowUpdateButton = vm.fromShowCreateButton && vm.fromContactFields.addressDetails\r\n                && vm.fromContactFields.addressDetails.key;\r\n            if (vm.fromShowUpdateButton) {\r\n                vm.updateFromConfirmed = false;\r\n            }\r\n        }, true);\r\n\r\n        $scope.$watch(() => vm.toContactFields, (newVal) => {\r\n            let empty = true;\r\n            Object.keys(newVal).forEach((key) => {\r\n                const toProperty = newVal[key];\r\n                const toPropertyNotBlank = (toProperty !== '') && (typeof toProperty !== 'undefined');\r\n                if (toPropertyNotBlank && (!immutableProperties.includes(key))) {\r\n                    empty = false;\r\n                }\r\n            });\r\n            vm.toShowCreateButton = !empty;\r\n            vm.toShowUpdateButton = vm.toShowCreateButton && vm.toContactFields.addressDetails\r\n                && vm.toContactFields.addressDetails.key;\r\n            if (vm.toShowUpdateButton) {\r\n                vm.updateToConfirmed = false;\r\n            }\r\n        }, true);\r\n\r\n\r\n        profileShipmentService.getDefaultSavingShipment()\r\n            .then((response) => {\r\n                vm.safingShipment = response.saveIncompleteSavings;\r\n            });\r\n    }\r\n\r\n    function onNextClick(contactDetailsForm, ewfFormCtrl) {\r\n        if (contactDetailsForm.$valid) {\r\n\r\n            vm.addLineFrom = normalizeAddress(vm.fromContactFields.addressDetails.addrLine1);\r\n            vm.addLineTo = normalizeAddress(vm.toContactFields.addressDetails.addrLine1);\r\n\r\n            const contactKeys = {\r\n                fromContactKey: vm.fromContactFields.addressDetails.key || '00',\r\n                toContactKey: vm.toContactFields.addressDetails.key || '00'\r\n            };\r\n            shipmentService.setContactsKeys(contactKeys);\r\n            shipmentService.setAddressDetails(vm.fromContactFields, vm.toContactFields);\r\n            shipmentService.setPhoneDetails(vm.fromContactFields, vm.toContactFields);\r\n\r\n            vm.nextCallback();\r\n        } else {\r\n            ewfFormCtrl.ewfValidation();\r\n        }\r\n    }\r\n\r\n    function onEditClick() {\r\n        vm.editCallback();\r\n    }\r\n\r\n    function clearAddressFrom() {\r\n        vm.fromContactFields = {};\r\n        vm.fromContactFields.countries = countries;\r\n        vm.fromContactFields.phoneDetails = {};\r\n    }\r\n\r\n    function clearAddressTo() {\r\n        vm.toContactFields = {};\r\n        vm.toContactFields.countries = countries;\r\n        vm.toContactFields.phoneDetails = {};\r\n    }\r\n\r\n    function normalizeAddress(address) {\r\n        return address.name || address;\r\n    }\r\n\r\n    function swapAddresses() {\r\n        const swapAddressesHandler = (countryCode) => {\r\n            if (!vm.fromContactFields.addressDetails.countryCode || !vm.toContactFields.addressDetails.countryCode) {\r\n                //TODO: show validation error for empty country here\r\n                return;\r\n            }\r\n\r\n            const toCountryCode = vm.toContactFields.addressDetails.countryCode.value\r\n                ? vm.toContactFields.addressDetails.countryCode.value\r\n                : vm.toContactFields.addressDetails.countryCode;\r\n\r\n            if (countryCode === toCountryCode) {\r\n                swapAddressObjects();\r\n            } else if (countryCode !== vm.toContactFields.addressDetails.countryCode) {\r\n                modalWindow = modalService.showDialog({\r\n                    closeOnEsc: true,\r\n                    scope: $scope,\r\n                    windowClass: 'ngdialog-theme-default',\r\n                    template:'<div ewf-modal nls-title=shipment.address_details_swap_dialog_title><p nls=shipment.address_details_swap_dialog_description></p><p nls=shipment.address_details_swap_dialog_enter_import_express_account></p><div class=row><div class=field-wrapper><input class=\\\"input input_width_full\\\" type=text ng-model=addressDetailsCtrl.importAccountNumber><div class=\\\"label-error ng-scope\\\" ng-if=addressDetailsCtrl.error>{{addressDetailsCtrl.error}}</div></div><label class=checkbox><input id=save_import_account_number class=checkbox__input name=\\\"favorite[\\'receiver\\']\\\" type=checkbox value=true data-aqa-id=save_import_account_number ng-model=addressDetailsCtrl.savingAccountNumberSelected> <span class=label nls=shipment.address_details_swap_dialog_save_account></span></label></div><button class=btn ng-click=addressDetailsCtrl.checkImportAccountNumber() nls=shipment.address_details_swap_dialog_go></button><h4 nls=shipment.address_details_swap_dialog_dont_have_account></h4><p><span nls=shipment.address_details_swap_dialog_contact></span> <a nls=shipment.address_details_swap_dialog_contact_us ng-click=addressDetailsCtrl.redirectToHelpCenterPage();></a> <span nls=shipment.address_details_swap_dialog_contact_learn_more></span></p></div>'\r\n                });\r\n            }\r\n        };\r\n\r\n        userService.whoAmI()\r\n            .then((response) => {\r\n                swapAddressesHandler(response.countryCode2);\r\n            });\r\n    }\r\n\r\n    function checkImportAccountNumber() {\r\n        delete vm.error;\r\n        const checkUserCanImport = addressDetailsService\r\n            .checkUserCanImport(vm.toContactFields.addressDetails.countryCode.value,\r\n                vm.fromContactFields.addressDetails.countryCode.value,\r\n                vm.importAccountNumber);\r\n\r\n        checkUserCanImport\r\n            .then(() => {\r\n                swapAddressObjects();\r\n                saveAccountToUserProfile();\r\n                modalWindow.close();\r\n            })\r\n            .catch(() => {\r\n                vm.error = nlsService.getTranslationSync('shipment.address_details_error_invalid_imp_account_number');\r\n            });\r\n\r\n    }\r\n\r\n    function swapAddressObjects() {\r\n        const tempContactFields = angular.copy(vm.fromContactFields);\r\n        vm.fromContactFields = angular.copy(vm.toContactFields);\r\n        vm.toContactFields = angular.copy(tempContactFields);\r\n    }\r\n\r\n    function saveAccountToUserProfile() {\r\n        if (vm.savingAccountNumberSelected) {\r\n            addressDetailsService.saveAccountNumber(vm.importAccountNumber);\r\n        }\r\n    }\r\n\r\n    function showSaveContactDialog(identifier) {\r\n        switch (identifier) {\r\n            case vm.FROM:\r\n                $scope.newContact = vm.fromContactFields;\r\n                break;\r\n            case vm.TO:\r\n                $scope.newContact = vm.toContactFields;\r\n                break;\r\n        }\r\n\r\n        $scope.saveContact = saveContact;\r\n        $scope.identifier = identifier;\r\n\r\n        modalWindow = modalService.showDialog({\r\n            closeOnEsc: true,\r\n            scope: $scope,\r\n            windowClass: 'ngdialog-theme-default',\r\n            template:'<div ewf-modal><div class=\\\"row fw-bold\\\" nls=shipment.address_details_save_nickname></div><input type=text class=\\\"input input_width_full\\\" ng-model=nickname><div class=ewf-modal__footer><button type=button class=btn ng-click=\\\"saveContact(nickname, newContact, identifier)\\\" nls=shipment.address_details_save></button></div></div>'\r\n        });\r\n    }\r\n\r\n    function saveContact(nickname, contactFields, identifier) {\r\n        const contact = {\r\n            contactDetails: {\r\n                addressDetails: {},\r\n                phoneDetails: {},\r\n                nickname\r\n            },\r\n            // TODO: ad-hoc solution. Should be rewised by product owner\r\n            notifications\r\n        };\r\n\r\n        mapContactFields(contact, contactFields);\r\n\r\n        ewfCrudService.addElement('/api/addressbook/contact/add', contact)\r\n            .then(() => {\r\n                switch (identifier) {\r\n                    case vm.FROM:\r\n                        vm.fromNickname = nickname;\r\n                        vm.saveFromConfirmed = true;\r\n                        break;\r\n                    case vm.TO:\r\n                        vm.toNickname = nickname;\r\n                        vm.saveToConfirmed = true;\r\n                        break;\r\n                }\r\n                modalWindow.close();\r\n            })\r\n            .catch(() => {\r\n                validateAddressDetails();\r\n                modalWindow.close();\r\n            });\r\n    }\r\n\r\n    function updateContact(identifier) {\r\n        switch (identifier) {\r\n            case vm.FROM:\r\n                callUpdateContact(vm.fromContactFields, identifier);\r\n                break;\r\n            case vm.TO:\r\n                callUpdateContact(vm.toContactFields, identifier);\r\n                break;\r\n        }\r\n    }\r\n\r\n    function callUpdateContact(newContact, identifier) {\r\n        const contact = {\r\n            key: newContact.addressDetails.key,\r\n            contactDetails: {\r\n                addressDetails: {},\r\n                phoneDetails: {},\r\n                nickname: newContact.nickname\r\n            },\r\n            // TODO: ad-hoc solution. Should be rewised by product owner\r\n            notifications\r\n        };\r\n\r\n        mapContactFields(contact, newContact);\r\n\r\n        ewfCrudService.updateElement('/api/addressbook/contact/modify', contact)\r\n            .then(() => {\r\n                switch (identifier) {\r\n                    case vm.FROM:\r\n                        vm.updateFromConfirmed = true;\r\n                        break;\r\n                    case vm.TO:\r\n                        vm.updateToConfirmed = true;\r\n                        break;\r\n                }\r\n\r\n            })\r\n            .catch(() => {\r\n                validateAddressDetails();\r\n            });\r\n    }\r\n\r\n    function mapContactFields(contact, fields) {\r\n        contact.contactDetails.name = fields.name;\r\n        contact.contactDetails.company = fields.company;\r\n        contact.contactDetails.email = fields.email;\r\n        if (fields.phoneDetails) {\r\n            contact.contactDetails.phoneDetails = {\r\n                fax: fields.phoneDetails.fax,\r\n                phone: fields.phoneDetails.phone,\r\n                phoneCountryCode: fields.phoneDetails.phoneCountryCode,\r\n                phoneExt: fields.phoneDetails.phoneExt,\r\n                phoneType: fields.phoneDetails.phoneType,\r\n                smsEnabled: fields.phoneDetails.smsEnabled\r\n            };\r\n        }\r\n\r\n        contact.contactDetails.addressDetails = {\r\n            addrLine1: fields.addressDetails.addrLine1,\r\n            addrLine2: fields.addressDetails.addrLine2,\r\n            addrLine3: fields.addressDetails.addrLine3,\r\n            zipOrPostCode: fields.addressDetails.zipOrPostCode,\r\n            city: fields.addressDetails.city,\r\n            stateOrProvince: fields.addressDetails.stateOrProvince,\r\n            residentialAddress: !!fields.addressDetails.residentialAddress,\r\n            countryCode: getCountryCode(fields.addressDetails.countryCode)\r\n        };\r\n    }\r\n\r\n    function validateAddressDetails() {\r\n        //\r\n        $scope.$broadcast('ValidateForm');\r\n    }\r\n\r\n    function getCountryCode(countryCodeField) {\r\n        if (countryCodeField) {\r\n            return countryCodeField.value ? countryCodeField.value : countryCodeField;\r\n        }\r\n\r\n        // Yes, it is hardcoded now.\r\n        return 'US';\r\n    }\r\n\r\n    function fillForm(fields, item) {\r\n        fields.email = item.email;\r\n        fields.name = item.contactName;\r\n        fields.company = item.companyName;\r\n        fields.nickname = item.nickName;\r\n\r\n        fillAddressDetails(fields, item);\r\n        fillPhoneDetails(fields, item);\r\n    }\r\n\r\n    function fillPhoneDetails(fields, item) {\r\n        fields.phoneDetails = {\r\n            phoneCountryCode: item.phoneCountryCode,\r\n            phoneType: item.phoneType,\r\n            phone: item.phoneNumber,\r\n            phoneExt: item.phoneExt,\r\n            fax: item.fax,\r\n            smsEnabled: item.smsEnabled\r\n        };\r\n    }\r\n\r\n    function fillAddressDetails(fields, item) {\r\n        fields.addressDetails = {\r\n            key: item.key,\r\n            city: item.city,\r\n            addrLine1: item.address,\r\n            addrLine2: item.address2,\r\n            addrLine3: item.address3,\r\n            stateOrProvince: item.stateOrProvince,\r\n            zipOrPostCode: item.zipOrPostCode,\r\n            countryCode: getCountryCode(item.countryCode),\r\n            countryName: item.country,\r\n            residentialAddress: getAddressType(item)\r\n        };\r\n    }\r\n\r\n    function getAddressType(item) {\r\n        if (angular.isDefined(item.residentialAddress)) {\r\n            return item.residentialAddress;\r\n        }\r\n        return item.addressType === RESIDENTAL_ADDRESS_TYPE;\r\n    }\r\n\r\n    function addressBookSelected(item, identificator) {\r\n        switch (identificator) {\r\n            case vm.FROM:\r\n                fillForm(vm.fromContactFields, item);\r\n                break;\r\n            case vm.TO:\r\n                fillForm(vm.toContactFields, item);\r\n                break;\r\n        }\r\n    }\r\n\r\n    function typeaheadSelected(item, identificator, addressCtrl) {\r\n        //TODO: move to modal service\r\n        addressCtrl.showPopup = false;\r\n        const contactDetailPromise = ewfCrudService.getElementDetails('/api/addressbook/contact', item.key);\r\n        $q.all([contactDetailPromise, availableLocationsPromise])\r\n            .then((response) => {\r\n                const [contactDetailsResponse, availableLocationsResponse] = response;\r\n                const contactDetails = mapFields(contactDetailsResponse.contactDetails, availableLocationsResponse);\r\n                switch (identificator) {\r\n                    case vm.FROM:\r\n                        fillForm(vm.fromContactFields, contactDetails);\r\n                        break;\r\n                    case vm.TO:\r\n                        fillForm(vm.toContactFields, contactDetails);\r\n                        break;\r\n                }\r\n            });\r\n    }\r\n\r\n    function mapFields(contactDetails, availableLocations) {\r\n        //TODO: remove after BE fixes contract\r\n        const result = Object.assign(\r\n            {\r\n                phoneNumber: contactDetails.phoneDetails.phone,\r\n                address: contactDetails.addressDetails.addrLine1,\r\n                address2: contactDetails.addressDetails.addrLine2,\r\n                address3: contactDetails.addressDetails.addrLine3,\r\n                contactName: contactDetails.name,\r\n                companyName: contactDetails.company,\r\n                nickName: contactDetails.nickname\r\n            },\r\n            contactDetails,\r\n            contactDetails.addressDetails,\r\n            contactDetails.phoneDetails,\r\n            contactDetails.taxDetails\r\n        );\r\n\r\n        const countryInfo = availableLocations\r\n            .find((eachCountryInfo) => eachCountryInfo.code2 === result.countryCode);\r\n        result.country = countryInfo && countryInfo.name;\r\n        return result;\r\n    }\r\n\r\n    function getCurrentIncompleteData() {\r\n        vm.fromContactFields.addressDetails = vm.fromContactFields.addressDetails || {};\r\n        vm.toContactFields.addressDetails = vm.toContactFields.addressDetails || {};\r\n\r\n        const contactKeys = {\r\n            fromContactKey: vm.fromContactFields.addressDetails.key || '00',\r\n            toContactKey: vm.toContactFields.addressDetails.key || '00'\r\n        };\r\n\r\n        if (vm.fromContactFields.addressDetails.addrLine1) {\r\n            vm.addLineFrom = normalizeAddress(vm.fromContactFields.addressDetails.addrLine1);\r\n        }\r\n        if (vm.toContactFields.addressDetails.addrLine1) {\r\n            vm.addLineTo = normalizeAddress(vm.toContactFields.addressDetails.addrLine1);\r\n        }\r\n\r\n        shipmentService.setContactsKeys(contactKeys);\r\n        shipmentService.setAddressDetails(vm.fromContactFields, vm.toContactFields);\r\n        shipmentService.setPhoneDetails(vm.fromContactFields, vm.toContactFields);\r\n    }\r\n\r\n    function redirectToHelpCenterPage() {\r\n        navigationService.location('help-center.html');\r\n    }\r\n\r\n    function loadShipmentData(data) {\r\n        Object.assign(vm.fromContactFields, shipmentService.getFromContactFields(data));\r\n        Object.assign(vm.toContactFields, shipmentService.getToContactFields(data));\r\n\r\n        vm.addLineFrom = vm.normalizeAddress(vm.fromContactFields.addressDetails.addrLine1);\r\n        vm.addLineTo = vm.normalizeAddress(vm.toContactFields.addressDetails.addrLine1);\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}