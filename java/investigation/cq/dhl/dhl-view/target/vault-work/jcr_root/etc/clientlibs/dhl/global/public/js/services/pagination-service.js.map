{"version":3,"sources":["services/pagination-service.js"],"names":[],"mappings":"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","file":"services/pagination-service.js","sourcesContent":["import ewf from 'ewf';\r\n\r\newf.service('paginationService', PaginationService);\r\n\r\nexport default function PaginationService() {\r\n    this.paginate = paginate;\r\n\r\n    /**\r\n     * `paginate` function paginates argument data according to `pageIndex` and `pageSize` arguments.\r\n     *\r\n     * According to business requirements, there are several use-cases that are related to pagination.\r\n     * A typical pagination consists of the following use-cases:\r\n     * 1. `In-the-middle` pagination view:\r\n     *\r\n     *      [1] [...] [x - 1] [x] [x + 1] [...] [n]\r\n     *                -------------------\r\n     *                  the middle part\r\n     *\r\n     * 1.1. For the `In-the-middle` view a currently selected page is always page [x] (the center page)\r\n     *\r\n     * 2. Left-aligned pagination view:\r\n     *\r\n     *      [1] [2] [3] [4] [...] [n]\r\n     *\r\n     * 3. Right-aligned pagination view:\r\n     *\r\n     *      [1] [...] [n - 3] [n - 2] [n - 1] [n]\r\n     *\r\n     * 4. Trimmed view (when the amount of pages is less than the amount of pages which displayed in\r\n     * pagination, i.e. 5 by default)\r\n     *\r\n     *      [1] [2] [3] [4] [5]\r\n     *\r\n     * 5. Special case: when there is 1 page to show, be careful in order not to show [1] [1]\r\n     * ------------------------------------------------------------------------------------------------\r\n     *\r\n     * In order to deal with the business requirement a `paginationWindow` variable is used, it is an array\r\n     * of objects with the following interface:\r\n     *\r\n     *      {\r\n     *          index: `an index of the page`,\r\n     *          display: `the value used for display`\r\n     *      }\r\n     */\r\n    function paginate(\r\n            data,\r\n            pageIndex = 0,\r\n            pageSize = 0,\r\n            leftButtonsCount = 1,\r\n            rightButtonsCount = 1,\r\n            middleButtonsCount = 3\r\n        ) {\r\n\r\n        const middleButtonsHalf = Math.floor(middleButtonsCount / 2);\r\n\r\n        if (data && data.length && pageSize > 0) {\r\n            const pageCount = Math.floor(data.length / pageSize) + (data.length % pageSize === 0 ? 0 : 1);\r\n            const paginationPageIndex = (pageIndex < pageCount) ? pageIndex : pageCount - 1;\r\n            const rowMin = pageSize * paginationPageIndex + 1;\r\n            const rowMax = Math.min(data.length, pageSize * (paginationPageIndex + 1));\r\n\r\n            const paginationWindow = [];\r\n            const paginationData = pageCount > 0 ? data.slice(rowMin - 1, rowMax) : [];\r\n\r\n            addLeftSide(\r\n                paginationWindow,\r\n                leftButtonsCount < paginationPageIndex - middleButtonsHalf,\r\n                Math.min(pageCount, leftButtonsCount)\r\n            );\r\n\r\n            // Middle buttons\r\n            const middleMed = Math.max(paginationPageIndex - middleButtonsHalf, leftButtonsCount);\r\n            const middleMax = Math.min(middleMed + middleButtonsCount, pageCount - rightButtonsCount);\r\n            const middleMin = Math.max(middleMax - middleButtonsCount, leftButtonsCount);\r\n\r\n            for (let i = middleMin; i < middleMax; i++) {\r\n                paginationWindow.push({\r\n                    index: i,\r\n                    display: i + 1\r\n                }); // Add middle buttons\r\n            }\r\n\r\n            addRightSide(\r\n                paginationWindow,\r\n                middleMax < pageCount - rightButtonsCount,\r\n                middleMax < pageCount && pageCount > 1,\r\n                pageCount\r\n            );\r\n\r\n            return {\r\n                pageSize: pageSize || 0,\r\n\r\n                rowMin,\r\n                rowMax,\r\n\r\n                pageIndex: paginationPageIndex,\r\n                pageCount,\r\n\r\n                data: paginationData,\r\n                window: paginationWindow\r\n            };\r\n        }\r\n\r\n        return generateDefaultSettings(pageSize);\r\n    }\r\n\r\n    function generateDefaultSettings(pageSize) {\r\n        return {\r\n            pageSize: pageSize || 0,\r\n\r\n            rowMin: 0,\r\n            rowMax: 0,\r\n\r\n            pageIndex: 0,\r\n            pageCount: 0,\r\n\r\n            data: [],\r\n            // even when there is nothing to display first page is displayed\r\n            window: [{\r\n                index: 0,\r\n                display: 1\r\n            }]\r\n        };\r\n    }\r\n\r\n    function addLeftSide(paginationWindow, shouldAddEllipsis, buttonsCount) {\r\n        for (let i = 0; i < buttonsCount; i++) {\r\n            paginationWindow.push({\r\n                index: i,\r\n                display: i + 1\r\n            });\r\n        }\r\n\r\n        if (shouldAddEllipsis) {\r\n            paginationWindow.push({\r\n                index: null,\r\n                display: '...'\r\n            });\r\n        }\r\n    }\r\n\r\n    function addRightSide(paginationWindow, shouldAddEllipsis, shouldAddRightButtons, pageCount) {\r\n        if (shouldAddEllipsis) {\r\n            paginationWindow.push({\r\n                index: null,\r\n                display: '...'\r\n            });\r\n        }\r\n\r\n        if (shouldAddRightButtons) {\r\n            paginationWindow.push({\r\n                index: pageCount - 1,\r\n                display: pageCount\r\n            });\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}