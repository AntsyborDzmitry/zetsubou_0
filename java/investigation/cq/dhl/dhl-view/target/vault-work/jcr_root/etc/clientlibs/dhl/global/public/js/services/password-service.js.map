{"version":3,"sources":["services/password-service.js"],"names":[],"mappings":"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","file":"services/password-service.js","sourcesContent":["import ewf from 'ewf';\r\n\r\newf.service('passwordService', passwordService);\r\n\r\npasswordService.$inject = ['$http', '$q', 'logService'];\r\n\r\nexport default function passwordService($http, $q, logService) {\r\n    this.sendResetPassword = sendResetPassword;\r\n    this.resetPassword = resetPassword;\r\n    this.validateResetToken = validateResetToken;\r\n    this.resendPasswordResetEmail = resendPasswordResetEmail;\r\n    this.createPassword = createPassword;\r\n    this.validateCreateToken = validateCreateToken;\r\n    this.resendPasswordCreateEmail = resendPasswordCreateEmail;\r\n    this.changeExpiredPassword = changeExpiredPassword;\r\n\r\n    // --- forgot password\r\n\r\n    function sendResetPassword(email, captchaData) {\r\n        const credentials = {\r\n            captchaData,\r\n            email\r\n        };\r\n\r\n        return $http.post('/api/user/password/reset/send', credentials)\r\n            .then((response) => response.data)\r\n            .catch((response) => {\r\n                if (response.data && response.data.errors) {\r\n                    const errCode = response.data.errors[0];\r\n                    return $q.reject(errCode);\r\n                }\r\n                return $q.reject('common.service_currently_unavailable');\r\n            });\r\n    }\r\n\r\n    // --- reset password\r\n\r\n    function resetPassword(token, newPassword) {\r\n        const credentials = {\r\n            token,\r\n            newPassword\r\n        };\r\n\r\n        return $http.post('/api/user/password/reset', credentials)\r\n            .then((response) => response.data);\r\n    }\r\n\r\n    function validateResetToken(token) {\r\n        return $http.post('/api/user/password/reset/token/validate', {token})\r\n            .then((response) => response)\r\n            .catch((err) => {\r\n                logService.log(err);\r\n                return $q.reject(err);\r\n            });\r\n    }\r\n\r\n    function resendPasswordResetEmail(expiredToken) {\r\n        return $http.post('/api/user/password/reset/token/renew', {token: expiredToken})\r\n            .then((response) => response)\r\n            .catch((err) => {\r\n                logService.log(err);\r\n                return $q.reject(err);\r\n            });\r\n    }\r\n\r\n    // --- create password\r\n\r\n    function createPassword(token, password) {\r\n        const credentials = {\r\n            token,\r\n            password\r\n        };\r\n\r\n        return $http.post('/api/user/password/create', credentials)\r\n            .then((response) => response.data);\r\n    }\r\n\r\n    function validateCreateToken(token) {\r\n        return $http.post('/api/user/password/create/token/validate', {token})\r\n            .then((response) => response)\r\n            .catch((err) => {\r\n                logService.log(err);\r\n                return $q.reject(err);\r\n            });\r\n    }\r\n\r\n    function resendPasswordCreateEmail(expiredToken) {\r\n        return $http.post('/api/user/password/create/token/renew', {token: expiredToken})\r\n            .then((response) => response)\r\n            .catch((err) => {\r\n                logService.log(err);\r\n                return $q.reject(err);\r\n            });\r\n    }\r\n\r\n    // --- change expired password\r\n\r\n    function changeExpiredPassword(username, oldPassword, newPassword) {\r\n        const credentials = {\r\n            username,\r\n            oldPassword,\r\n            newPassword\r\n        };\r\n\r\n        return $http.post('/api/user/password/changeExpired', credentials)\r\n            .then((response) => response.data)\r\n            .catch((err) => {\r\n                logService.log(err);\r\n                return $q.reject(err);\r\n            });\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}