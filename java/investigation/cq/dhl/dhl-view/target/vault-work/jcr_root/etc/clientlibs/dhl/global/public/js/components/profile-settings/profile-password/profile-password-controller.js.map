{"version":3,"sources":["components/profile-settings/profile-password/profile-password-controller.js"],"names":[],"mappings":";;;qBAcwB,yBAAyB;;AARjD,6BAAyB,CAAC,OAAO,GAAG,CAChC,QAAQ,EACR,UAAU,EACV,wBAAwB,EACxB,gBAAgB,EAChB,mBAAmB,CACtB,CAAC;;AAEa,aAAS,yBAAyB,CAC7C,MAAM,EACN,QAAQ,EACR,sBAAsB,EACtB,cAAc,EACd,iBAAiB,EAAE;;AAEnB,YAAM,EAAE,GAAG,IAAI,CAAC;;AAEhB,cAAM,CAAC,MAAM,CAAC,EAAE,EAAE;AACd,uBAAW,EAAE,IAAI;AACjB,uBAAW,EAAE,EAAE;AACf,uBAAW,EAAE,EAAE;AACf,wBAAY,EAAE,EAAE;AAChB,2BAAe,EAAE,KAAK;;AAEtB,0BAAc,EAAd,cAAc;SACjB,CAAC,CAAC;;AAEH,YAAM,0BAA0B,GAAG,sBAAsB,CAAC,wBAAwB,EAAE,CAAC;;AAErF,YAAM,OAAO,GAAG,0BAA0B,CACrC,IAAI,CAAC,UAAC,QAAQ;mBAAK,EAAE,CAAC,YAAY,GAAG,QAAQ,CAAC,QAAQ;SAAA,CAAC,CAAC;AAC7D,eAAO,iBAAiB,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;;AAE/C,iBAAS,cAAc,GAAG;AACtB,gBAAI,EAAE,CAAC,WAAW,KAAK,EAAE,CAAC,WAAW,EAAE;AACnC,oBAAM,iBAAiB,GAAG,oBAAoB,CAAC,EAAE,CAAC,WAAW,EAAE,EAAE,CAAC,WAAW,CAAC,CAAC;AAC/E,oBAAM,sBAAsB,GAAG,sBAAsB,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,CAAC;;AAE/F,uBAAO,sBAAsB,CACxB,IAAI,CAAC,UAAC,QAAQ,EAAK;AAChB,sBAAE,CAAC,uBAAuB,GAAG,QAAQ,CAAC;AACtC,sBAAE,CAAC,WAAW,GAAG,EAAE,CAAC;AACpB,sBAAE,CAAC,YAAY,GAAG,EAAE,CAAC;AACrB,sBAAE,CAAC,eAAe,GAAG,IAAI,CAAC;AAC1B,sBAAE,CAAC,qBAAqB,GAAG,KAAK,CAAC;AACjC,sBAAE,CAAC,4BAA4B,GAAG,EAAE,CAAC;;AAErC,4BAAQ,CAAC;+BAAM,EAAE,CAAC,eAAe,GAAG,KAAK;qBAAA,EAAE,cAAc,CAAC,0BAA0B,CAAC,CAAC;iBACzF,CAAC,SACI,CAAC,UAAC,GAAG,EAAK;AACZ,sBAAE,CAAC,WAAW,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC;;AAE1C,0BAAM,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,UAAC,SAAS,EAAK;AAChD,2BAAG,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,UAAC,YAAY,EAAK;AACjD,8BAAE,CAAC,WAAW,CAAC,aAAa,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;yBACzD,CAAC,CAAC;qBACN,CAAC,CAAC;AACH,sBAAE,CAAC,WAAW,CAAC,aAAa,EAAE,CAAC;iBAClC,CAAC,CAAC;aACV;SACJ;;AAEF,iBAAS,oBAAoB,CAAC,WAAW,EAAE,WAAW,EAAE;AACnD,mBAAO;AACH,2BAAW,EAAX,WAAW;AACX,2BAAW,EAAX,WAAW;aACd,CAAC;SACL;KACJ","file":"components/profile-settings/profile-password/profile-password-controller.js","sourcesContent":["\r\nimport './profile-password-directive';\r\nimport './../profile-settings-service';\r\nimport './../../../constants/system-settings-constants';\r\nimport './../../../services/ewf-spinner-service';\r\n\r\nProfilePasswordController.$inject = [\r\n    '$scope',\r\n    '$timeout',\r\n    'profileSettingsService',\r\n    'systemSettings',\r\n    'ewfSpinnerService'\r\n];\r\n\r\nexport default function ProfilePasswordController(\r\n    $scope,\r\n    $timeout,\r\n    profileSettingsService,\r\n    systemSettings,\r\n    ewfSpinnerService) {\r\n\r\n    const vm = this;\r\n\r\n    Object.assign(vm, {\r\n        ewfFormCtrl: null,\r\n        oldPassword: '',\r\n        newPassword: '',\r\n        emailAddress: '',\r\n        passwordUpdated: false,\r\n\r\n        updatePassword\r\n    });\r\n\r\n    const authenticateDetailsPromise = profileSettingsService.getAuthenticationDetails();\r\n\r\n    const promise = authenticateDetailsPromise\r\n        .then((response) => vm.emailAddress = response.userName);\r\n    return ewfSpinnerService.applySpinner(promise);\r\n\r\n    function updatePassword() {\r\n        if (vm.oldPassword !== vm.newPassword) {\r\n            const credentialsObject = getCredentialsObject(vm.oldPassword, vm.newPassword);\r\n            const profilePasswordPromise = profileSettingsService.updateProfilePassword(credentialsObject);\r\n\r\n            return profilePasswordPromise\r\n                .then((response) => {\r\n                    vm.profilePasswordResponse = response;\r\n                    vm.newPassword = '';\r\n                    vm.emailAddress = '';\r\n                    vm.passwordUpdated = true;\r\n                    vm.newPasswordValidation = false;\r\n                    vm.newPasswordValidationMessage = '';\r\n\r\n                    $timeout(() => vm.passwordUpdated = false, systemSettings.showInformationHintTimeout);\r\n                })\r\n                .catch((err) => {\r\n                    vm.ewfFormCtrl.setErrorsFromResponse(err);\r\n\r\n                    Object.keys(err.fieldErrors).forEach((fieldName) => {\r\n                        err.fieldErrors[fieldName].forEach((errorMessage) => {\r\n                            vm.ewfFormCtrl.addFieldError(fieldName, errorMessage);\r\n                        });\r\n                    });\r\n                    vm.ewfFormCtrl.ewfValidation();\r\n                });\r\n        }\r\n    }\r\n\r\n   function getCredentialsObject(oldPassword, newPassword) {\r\n        return {\r\n            oldPassword,\r\n            newPassword\r\n        };\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}