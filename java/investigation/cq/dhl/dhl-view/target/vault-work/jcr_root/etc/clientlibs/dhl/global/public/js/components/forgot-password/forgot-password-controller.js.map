{"version":3,"sources":["components/forgot-password/forgot-password-controller.js"],"names":[],"mappings":";;;qBAIwB,wBAAwB;;AAFhD,4BAAwB,CAAC,OAAO,GAAG,CAAC,QAAQ,EAAE,SAAS,EAAE,YAAY,EAAE,mBAAmB,EAAE,iBAAiB,CAAC,CAAC;;AAEhG,aAAS,wBAAwB,CAAC,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,iBAAiB,EAAE,eAAe,EAAE;AAC9G,YAAM,EAAE,GAAG,IAAI,CAAC;;AAEhB,YAAM,cAAc,GAAG;AACnB,mBAAO,EAAE,wCAAwC;AACjD,mBAAO,EAAE;AACL,8BAAc,EAAE,CAAC;AACjB,mBAAG,EAAE,oBAAoB;AACzB,yBAAS,EAAE;;;;AAIP,0BAAM,EAAE,kBAAW;;;;AAIf,iCAAS,SAAS,CAAC,OAAO,EAAE,QAAQ,EAAE;AAClC,gCAAI,OAAO,CAAC,gBAAgB,EAAE;AAC1B,uCAAO,CAAC,gBAAgB,CAAC,OAAO,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;6BACtD,MAAM;AACH,uCAAO,CAAC,WAAW,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;6BAC5C;yBACJ;;AAED,4BAAM,aAAa,GAAG,OAAO,CAAC,QAAQ,CAAC,cAAc,CAAC,wBAAwB,CAAC,CACtC,oBAAoB,CAAC,GAAG,CAAC,CAAC;;AAEnE,4BAAM,UAAU,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AAC7D,kCAAU,CAAC,OAAO,CAAC,UAAC,UAAU,EAAK;AAC/B,qCAAS,CAAC,UAAU,EAAE,UAAC,KAAK;uCAAK,KAAK,CAAC,cAAc,EAAE;6BAAA,CAAC,CAAC;yBAC5D,CAAC,CAAC;qBACN;iBACJ;aACJ;AACD,gBAAI,EAAE,cAAS,OAAO,EAAE;AACpB,kBAAE,CAAC,OAAO,GAAG,OAAO,CAAC;aACxB;SACJ,CAAC;;AAEF,cAAM,CAAC,MAAM,CAAC,EAAE,EAAE;AACd,6BAAiB,EAAjB,iBAAiB;AACjB,+BAAmB,EAAnB,mBAAmB;;AAEnB,iBAAK,EAAE,EAAE;AACT,iBAAK,EAAE,EAAE;AACT,mBAAO,EAAE,KAAK;AACd,0BAAc,EAAd,cAAc;SACjB,CAAC,CAAC;;AAGH,iBAAS,iBAAiB,CAAC,SAAS,EAAE;AAClC,kBAAM,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;AAClC,gBAAI,SAAS,CAAC,KAAK,KAAK,KAAK,IAAI,SAAS,CAAC,QAAQ,KAAK,KAAK,IAAI,SAAS,CAAC,SAAS,KAAK,KAAK,EAAE;AAC5F,uBAAO,eAAe,CAAC,iBAAiB,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC,CAC1E,IAAI,CAAC,YAAM;AACR,sBAAE,CAAC,OAAO,GAAG,IAAI,CAAC;AAClB,sBAAE,CAAC,KAAK,GAAG,EAAE,CAAC;iBACjB,CAAC,SACI,CAAC,UAAC,UAAU,EAAK;AACnB,sBAAE,CAAC,KAAK,GAAG,UAAU,CAAC;AACtB,sBAAE,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;iBACxB,CAAC,CAAC;aACV;SACJ;;AAED,iBAAS,mBAAmB,GAAG;AAC3B,6BAAiB,CAAC,eAAe,EAAE,CAAC;SACvC;KACJ","file":"components/forgot-password/forgot-password-controller.js","sourcesContent":["import './../../services/password-service';\r\n\r\nForgotPasswordController.$inject = ['$scope', '$window', 'logService', 'navigationService', 'passwordService'];\r\n\r\nexport default function ForgotPasswordController($scope, $window, logService, navigationService, passwordService) {\r\n    const vm = this;\r\n\r\n    const captchaOptions = {\r\n        imgPath: '/etc/clientlibs/dhl/global/public/img/',\r\n        captcha: {\r\n            numberOfImages: 5,\r\n            url: '/api/visualcaptcha',\r\n            callbacks: {\r\n                // TODO: We have to use this callback in 0.0.7 version of captcha.\r\n                // TODO: We sincerely hope, that in next version <a href> won't be in a sources anymore\r\n                // TODO:    so we can remove callback at all\r\n                loaded: function() {\r\n                    // Binds an element to callback on click\r\n                    // @param element object like document.getElementById() (has to be a single element)\r\n                    // @param callback function to run when the element is clicked\r\n                    function bindClick(element, callback) {\r\n                        if (element.addEventListener) {\r\n                            element.addEventListener('click', callback, false);\r\n                        } else {\r\n                            element.attachEvent('onclick', callback);\r\n                        }\r\n                    }\r\n                    // Avoid adding the hashtag to the URL when clicking/selecting visualCaptcha options\r\n                    const anchorOptions = $window.document.getElementById('forgotpassword-captcha')\r\n                                                            .getElementsByTagName('a');\r\n                    // .getElementsByTagName does not return an actual array, so\r\n                    const anchorList = Array.prototype.slice.call(anchorOptions);\r\n                    anchorList.forEach((anchorItem) => {\r\n                        bindClick(anchorItem, (event) => event.preventDefault());\r\n                    });\r\n                }\r\n            }\r\n        },\r\n        init: function(captcha) {\r\n            vm.captcha = captcha;\r\n        }\r\n    };\r\n\r\n    Object.assign(vm, {\r\n        sendResetPassword,\r\n        redirectToLoginPage,\r\n\r\n        email: '',\r\n        error: '',\r\n        isOnWay: false,\r\n        captchaOptions\r\n    });\r\n\r\n\r\n    function sendResetPassword(formError) {\r\n        $scope.$broadcast('ValidateForm');\r\n        if (formError.email === false && formError.required === false && formError.formatted === false) {\r\n            return passwordService.sendResetPassword(vm.email, vm.captcha.getCaptchaData())\r\n                .then(() => {\r\n                    vm.isOnWay = true;\r\n                    vm.error = '';\r\n                })\r\n                .catch((errorConst) => {\r\n                    vm.error = errorConst;\r\n                    vm.captcha.refresh();\r\n                });\r\n        }\r\n    }\r\n\r\n    function redirectToLoginPage() {\r\n        navigationService.redirectToLogin();\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}