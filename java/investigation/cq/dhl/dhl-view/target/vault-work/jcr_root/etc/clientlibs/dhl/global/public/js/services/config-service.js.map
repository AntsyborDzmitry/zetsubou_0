{"version":3,"sources":["services/config-service.js"],"names":[],"mappings":";;;;;;qBAQwB,aAAa;;;;;;AAJrC,qBAAI,OAAO,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;;AAE5C,iBAAa,CAAC,OAAO,GAAG,CAAC,OAAO,EAAE,IAAI,EAAE,YAAY,EAAE,mBAAmB,EAAE,iBAAiB,CAAC,CAAC;;AAE/E,aAAS,aAAa,CAAC,KAAK,EAAE,EAAE,EAAE,UAAU,EAAE,iBAAiB,EAAE,eAAe,EAAE;AAC7F,YAAM,iBAAiB,GAAG,sBAAsB,CAAC;AACjD,YAAM,mBAAmB,GAAG,uBAAuB,CAAC;;AAEpD,YAAM,SAAS,GAAG;AACd,oBAAQ,EAAR,QAAQ;AACR,sBAAU,EAAV,UAAU;AACV,wBAAY,EAAZ,YAAY;SACf,CAAC;;;;;;;;;;;;;;;;;;;AAoBF,YAAM,MAAM,GAAG,EAAE,CAAC;;AAElB,YAAM,WAAW,GAAG,SAAd,WAAW,CAAI,UAAU,EAAE,SAAS,EAAE,OAAO,EAAK;mCACf,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC;;;;gBAAlD,KAAK;gBAAE,QAAQ;gBAAE,SAAS;;AACjC,gBAAM,eAAe,GAAG,UAAU,IAAI,EAAE,CAAC;;AAEzC,2BAAe,CAAC,IAAI,CAAC;AACjB,qBAAK,EAAL,KAAK;AACL,yBAAS,EAAT,SAAS;AACT,uBAAO,EAAP,OAAO;aACV,CAAC,CAAC;AACH,mBAAO,eAAe,CAAC;SAC1B,CAAC;;AAEF,YAAM,eAAe,GAAG,SAAlB,eAAe,CAAI,UAAU,EAAK;AACpC,gBAAM,mBAAmB,GAAG,UAAU,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,SAAS,EAAK;AAC9D,oBAAI,CAAC,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE;AACzB,uBAAG,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;iBAC/B;AACD,mBAAG,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AAC7C,uBAAO,GAAG,CAAC;aACd,EAAE,EAAE,CAAC,CAAC;;AAEP,gBAAM,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,GAAG,CAAC,UAAC,OAAO,EAAK;AACnE,oBAAM,aAAa,GAAG,mBAAmB,CAAC,OAAO,CAAC,CAC7C,GAAG,CAAC,kBAAkB,CAAC,CACvB,MAAM,CAAC,UAAC,GAAG,EAAE,GAAG;2BAAK,GAAG,GAAG,UAAU,GAAG,GAAG;iBAAA,EAAE,EAAE,CAAC,CAAC;AACtD,uBAAO;AACH,+BAAW,EAAE,KAAK,CAAC,GAAG,yBAAuB,OAAO,GAAG,aAAa,CAAG;AACvE,2BAAO,EAAP,OAAO;iBACV,CAAC;aACN,CAAC,CAAC;;AAEH,mBAAO,EAAE,CAAC,GAAG,CAAC,aAAa,CAAC,GAAG,CAAC,UAAC,IAAI;uBAAK,IAAI,CAAC,WAAW;aAAA,CAAC,CAAC,CACvD,IAAI,CAAC,UAAC,QAAQ,EAAK;AAChB,oBAAM,SAAS,GAAG,aAAa,CAAC,GAAG,CAAC,UAAC,IAAI;2BAAK,IAAI,CAAC,OAAO;iBAAA,CAAC,CAAC;;AAE5D,wBAAQ,CAAC,OAAO,CAAC,UAAC,IAAI,EAAE,KAAK,EAAK;AAC9B,wBAAM,UAAU,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC;AACxC,8BAAU,CAAC,OAAO,CAAC,UAAC,QAAQ,EAAK;AAC7B,4BAAM,GAAG,GAAM,QAAQ,CAAC,KAAK,SAAI,QAAQ,CAAC,QAAQ,SAAI,QAAQ,CAAC,KAAK,AAAE,CAAC;AACvE,8BAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC;qBAC5C,CAAC,CAAC;iBACN,CAAC,CAAC;aACN,CAAC,SACI,CAAC,UAAC,QAAQ,EAAK;AACjB,0BAAU,CAAC,KAAK,oCAAkC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAG,CAAC;AAChF,uBAAO,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;aAC9B,CAAC,WACM,CAAC,YAAM;AACX,0BAAU,CAAC,OAAO,CAAC,UAAC,SAAS,EAAK;AAC9B,0BAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,IAC3F,iBAAiB,CAAC;iBACzB,CAAC,CAAC;aACN,CAAC,CAAC;SACV,CAAC;;AAEF,YAAM,aAAa,GAAG,MAAM,CAAC;mBACzB,eAAe,CAAC,sBAAsB,CAClC,WAAW,EACX,eAAe,CAClB;SAAA,CAAC,CAAC;;AAEP,iBAAS,QAAQ,CAAC,GAAG,EAA0D;gBAAxD,OAAO,yDAAG,iBAAiB,CAAC,cAAc,EAAE,CAAC,SAAS;;AACzE,gBAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE;AAClB,sBAAM,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;aACxB;;AAED,gBAAI,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,KAAK,iBAAiB,EAAE;AAC5C,uBAAO,EAAE,CAAC,MAAM,aAAW,GAAG,yDAAsD,CAAC;aACxF;;AAED,gBAAM,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,KAAK,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,mBAAmB,CAAA,AAAC,CAAC;;AAEnF,mBAAO,KAAK,KAAK,mBAAmB,GAC9B,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,GAC7B,aAAa,CAAC,GAAG,EAAE,OAAO,CAAC,CACxB,IAAI,CAAC,UAAC,gBAAgB;uBAAK,gBAAgB,EAAE;aAAA,CAAC,CAC9C,IAAI,CAAC,YAAM;AACR,oBAAM,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;;AAEpC,oBAAI,MAAM,KAAK,iBAAiB,EAAE;AAC9B,2BAAO,EAAE,CAAC,MAAM,6CAA2C,GAAG,OAAI,CAAC;iBACtE;;AAED,uBAAO,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aAC1B,CAAC,CAAC;SACd;;AAED,iBAAS,MAAM,CAAC,eAAe,EAAE;;;AAC7B,gBAAI,EAAE,GAAG,IAAI,CAAC;;AAEd,mBAAO,YAAa;kDAAT,IAAI;AAAJ,wBAAI;;;AACX,uBAAO,CAAC,EAAE,KAAK,EAAE,GAAG,eAAe,EAAE,CAAA,CAAC,CAAE,KAAK,QAAO,IAAI,CAAC,CAAC;aAC7D,CAAC;SACL;;AAED,iBAAS,UAAU,CAAC,GAAG,EAAE,OAAO,EAAE;AAC9B,mBAAO,SAAS,CAAC,QAAQ,CAAC,GAAG,EAAE,OAAO,CAAC,CAClC,IAAI,CAAC,UAAC,QAAQ;uBAAK,QAAQ,CAAC,IAAI,CAAC,KAAK;aAAA,CAAC,CAAC;SAChD;;AAED,iBAAS,YAAY,CAAC,GAAG,EAAE,OAAO,EAAE;AAChC,mBAAO,SAAS,CAAC,QAAQ,CAAC,GAAG,EAAE,OAAO,CAAC,CAClC,IAAI,CAAC,UAAC,QAAQ;uBAAK,QAAQ,CAAC,IAAI,CAAC,KAAK;aAAA,CAAC,CAAC;SAChD;;AAED,eAAO,SAAS,CAAC;KAEpB","file":"services/config-service.js","sourcesContent":["/*eslint-disable no-unused-vars,no-unreachable*/\r\nimport ewf from 'ewf';\r\nimport './../services/throttle-service';\r\n\r\newf.service('configService', ConfigService);\r\n\r\nConfigService.$inject = ['$http', '$q', 'logService', 'navigationService', 'throttleService'];\r\n\r\nexport default function ConfigService($http, $q, logService, navigationService, throttleService) {\r\n    const valueFailedToLoad = 'Value failed to load';\r\n    const valueRequestPending = 'Value request pending';\r\n\r\n    const publicApi = {\r\n        getValue,\r\n        getBoolean,\r\n        getFormField\r\n    };\r\n\r\n\r\n    /**\r\n     * values = {\r\n     *      'US': [\r\n     *          'some name, f.e. \"Rewards / Promotion.Available Reward programs.nectar\"': {\r\n     *              type:\"BOOLEAN\",\r\n     *              alias:\"nectar\",\r\n     *              group:\"Rewards / Promotion\",\r\n     *              subGroup:\"Available Reward programs\",\r\n     *              data:{\r\n     *                  value: true\r\n     *              }\r\n     *          },\r\n     *          ...\r\n     *      ],\r\n     *      'UA': [...]\r\n     *  }\r\n     */\r\n    const values = {};\r\n\r\n    const aggregateFn = (ciRequests, ciRequest, country) => {\r\n        const [group, subgroup, ciAliases] = ciRequest.split('.');\r\n        const currentRequests = ciRequests || [];\r\n\r\n        currentRequests.push({\r\n            group,\r\n            ciRequest,\r\n            country\r\n        });\r\n        return currentRequests;\r\n    };\r\n\r\n    const throttleHandler = (ciRequests) => {\r\n        const ciRequestsByCountry = ciRequests.reduce((acc, ciRequest) => {\r\n            if (!acc[ciRequest.country]) {\r\n                acc[ciRequest.country] = [];\r\n            }\r\n            acc[ciRequest.country].push(ciRequest.group);\r\n            return acc;\r\n        }, {});\r\n\r\n        const groupRequests = Object.keys(ciRequestsByCountry).map((country) => {\r\n             const groupsRequest = ciRequestsByCountry[country]\r\n                 .map(encodeURIComponent)\r\n                 .reduce((acc, str) => acc + '&groups=' + str, '');\r\n             return {\r\n                 httpRequest: $http.get(`/api/rules?country=${country}${groupsRequest}`),\r\n                 country\r\n             };\r\n        });\r\n\r\n        return $q.all(groupRequests.map((item) => item.httpRequest))\r\n            .then((response) => {\r\n                const countries = groupRequests.map((item) => item.country);\r\n\r\n                response.forEach((item, index) => {\r\n                    const collection = response[index].data;\r\n                    collection.forEach((ciResult) => {\r\n                        const key = `${ciResult.group}.${ciResult.subGroup}.${ciResult.alias}`;\r\n                        values[countries[index]][key] = ciResult;\r\n                    });\r\n                });\r\n            })\r\n            .catch((response) => {\r\n                logService.error(`Error while requesting values ${JSON.stringify(ciRequests)}`);\r\n                return $q.reject(response);\r\n            })\r\n            .finally(() => {\r\n                ciRequests.forEach((ciRequest) => {\r\n                    values[ciRequest.country][ciRequest.ciRequest] = values[ciRequest.country][ciRequest.ciRequest] ||\r\n                        valueFailedToLoad;\r\n                });\r\n            });\r\n    };\r\n\r\n    const requestValues = lazyFn(() =>\r\n        throttleService.createThrottleFunction(\r\n            aggregateFn,\r\n            throttleHandler\r\n        ));\r\n\r\n    function getValue(key, country = navigationService.getCountryLang().countryId) {\r\n        if (!values[country]) {\r\n            values[country] = [];\r\n        }\r\n\r\n        if (values[country][key] === valueFailedToLoad) {\r\n            return $q.reject(`Value \"${key}\" was already requested but failed to load properly`);\r\n        }\r\n\r\n        const value = values[country][key] || (values[country][key] = valueRequestPending);\r\n\r\n        return value !== valueRequestPending\r\n            ? $q.when(values[country][key])\r\n            : requestValues(key, country)\r\n                .then((throttleResultFn) => throttleResultFn())\r\n                .then(() => {\r\n                    const result = values[country][key];\r\n\r\n                    if (result === valueFailedToLoad) {\r\n                        return $q.reject(`Was unable to load setting/ConfigItem \"${key}\"`);\r\n                    }\r\n\r\n                    return $q.when(result);\r\n                });\r\n    }\r\n\r\n    function lazyFn(factoryFunction) {\r\n        let fn = null;\r\n\r\n        return (...args) => {\r\n            return (fn || (fn = factoryFunction())).apply(this, args);\r\n        };\r\n    }\r\n\r\n    function getBoolean(key, country) {\r\n        return publicApi.getValue(key, country)\r\n            .then((response) => response.data.value);\r\n    }\r\n\r\n    function getFormField(key, country) {\r\n        return publicApi.getValue(key, country)\r\n            .then((response) => response.data.value);\r\n    }\r\n\r\n    return publicApi;\r\n\r\n}\r\n"],"sourceRoot":"/source/"}