{"version":3,"sources":["directives/ewf-field-errors/ewf-field-errors-controller.js"],"names":[],"mappings":";;;qBAMwB,wBAAwB;;;;;;AAJhD,qBAAI,UAAU,CAAC,0BAA0B,EAAE,wBAAwB,CAAC,CAAC;;AAErE,4BAAwB,CAAC,OAAO,GAAG,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;;AAE7C,aAAS,wBAAwB,CAAC,MAAM,EAAE,UAAU,EAAE;AACjE,YAAM,EAAE,GAAG,IAAI,CAAC;;AAEhB,UAAE,CAAC,eAAe,GAAG,IAAI,CAAC;AAC1B,UAAE,CAAC,SAAS,GAAG,IAAI,CAAC;AACpB,UAAE,CAAC,aAAa,GAAG,EAAE,CAAC;AACtB,UAAE,CAAC,WAAW,GAAG,IAAI,CAAC;;AAEtB,UAAE,CAAC,kBAAkB,GAAG,EAAE,CAAC;;AAE3B,UAAE,CAAC,qBAAqB,GAAG,qBAAqB,CAAC;AACjD,UAAE,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;;AAEvC,cAAM,CAAC,GAAG,CAAC,6BAA6B,EAAE,EAAE,CAAC,qBAAqB,CAAC,CAAC;;AAEpE,iBAAS,qBAAqB,CAAC,KAAK,EAAE,MAAM,EAAE;AAC1C,gBAAI,MAAM,CAAC,WAAW,EAAE;AACpB,oBAAM,SAAS,GAAG,EAAE,CAAC,SAAS,CAAC;AAC/B,oBAAI;AACA,wBAAI,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;AACvE,4BAAM,UAAU,GAAG,EAAE,CAAC,eAAe,CAAC,aAAa,EAAE,CAAC;AACtD,0BAAE,CAAC,SAAS,GAAG,EAAE,CAAC,SAAS,GAAG,GAAG,GAAG,UAAU,CAAC;qBAClD;iBACJ,CAAC,OAAO,GAAG,EAAE;AACV,8BAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;iBACzB;;AAED,kBAAE,CAAC,aAAa,GAAG,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;AACpD,oBAAI,EAAE,CAAC,aAAa,EAAE;AAClB,wBAAI,EAAE,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;AAC7B,0BAAE,CAAC,eAAe,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;qBACjD;iBACJ;aACJ;SACJ;;AAED,iBAAS,gBAAgB,GAAG;AACxB,mBAAO,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,EAAE,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;SACzD;KACJ","file":"directives/ewf-field-errors/ewf-field-errors-controller.js","sourcesContent":["import ewf from 'ewf';\r\n\r\newf.controller('EwfFieldErrorsController', EwfFieldErrorsController);\r\n\r\nEwfFieldErrorsController.$inject = ['$scope', 'logService'];\r\n\r\nexport default function EwfFieldErrorsController($scope, logService) {\r\n    const vm = this;\r\n    //properties\r\n    vm.fieldController = null;\r\n    vm.fieldName = null;\r\n    vm.errorMessages = [];\r\n    vm.ewfFormCtrl = null;\r\n    // @todo: refactor this temporary hack and merge it with errorMessages\r\n    vm.validationMessages = [];\r\n    // methods\r\n    vm.onDisplayServerErrors = onDisplayServerErrors;\r\n    vm.getErrorMessages = getErrorMessages;\r\n\r\n    $scope.$on('ewfForm.displayServerErrors', vm.onDisplayServerErrors);\r\n\r\n    function onDisplayServerErrors(event, errors) {\r\n        if (errors.fieldErrors) {\r\n            const tempFName = vm.fieldName;\r\n            try {\r\n                if (vm.fieldName.includes('accountNumber') && !vm.fieldName.includes('-')) {\r\n                    const fieldValue = vm.fieldController.getModelValue();\r\n                    vm.fieldName = vm.fieldName + '-' + fieldValue;\r\n                }\r\n            } catch (err) {\r\n                logService.error(err);\r\n            }\r\n\r\n            vm.errorMessages = errors.fieldErrors[vm.fieldName];\r\n            if (vm.errorMessages) {\r\n                if (vm.errorMessages.length > 0) {\r\n                    vm.fieldController.invalidateModel(tempFName);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getErrorMessages() {\r\n        return vm.ewfFormCtrl.fieldErrors[vm.fieldName] || [];\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}